;buildInfoPackage: chisel3, version: 3.4.3, scalaVersion: 2.12.12, sbtVersion: 1.3.10
circuit PIPELINE : 
  module IF_ID : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc_in : SInt<32>, flip pc4_in : UInt<32>, flip SelectedPC : SInt<32>, flip SelectedInstr : UInt<32>, pc_out : SInt<32>, pc4_out : UInt<32>, SelectedPC_out : SInt<32>, SelectedInstr_out : UInt<32>}
    
    reg Pc_In : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IF_ID.scala 19:39]
    reg Pc4_In : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 20:39]
    reg S_pc : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[IF_ID.scala 21:39]
    reg S_instr : UInt<32>, clock with : (reset => (reset, UInt<32>("h00"))) @[IF_ID.scala 22:39]
    Pc_In <= io.pc_in @[IF_ID.scala 24:29]
    Pc4_In <= io.pc4_in @[IF_ID.scala 25:29]
    S_pc <= io.SelectedPC @[IF_ID.scala 26:29]
    S_instr <= io.SelectedInstr @[IF_ID.scala 27:29]
    io.pc_out <= Pc_In @[IF_ID.scala 29:29]
    io.pc4_out <= Pc4_In @[IF_ID.scala 30:29]
    io.SelectedPC_out <= S_pc @[IF_ID.scala 31:29]
    io.SelectedInstr_out <= S_instr @[IF_ID.scala 32:29]
    
  module ID_EX : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1_in : UInt<5>, flip rs2_in : UInt<5>, flip rs1_data_in : SInt<32>, flip rs2_data_in : SInt<32>, flip imm : SInt<32>, flip rd_in : UInt<5>, flip func3_in : UInt<3>, flip func7_in : UInt<1>, flip ctrl_MemWr_in : UInt<1>, flip ctrl_Branch_in : UInt<1>, flip ctrl_MemRd_in : UInt<1>, flip ctrl_Reg_W_in : UInt<1>, flip ctrl_MemToReg_in : UInt<1>, flip ctrl_AluOp_in : UInt<3>, flip ctrl_OpA_in : UInt<2>, flip ctrl_OpB_in : UInt<1>, flip ctrl_nextpc_in : UInt<2>, flip IFID_pc4_in : UInt<32>, rs1_out : UInt<5>, rs2_out : UInt<5>, rs1_data_out : SInt<32>, rs2_data_out : SInt<32>, rd_out : UInt<5>, imm_out : SInt<32>, func3_out : UInt<3>, func7_out : UInt<1>, ctrl_MemWr_out : UInt<1>, ctrl_Branch_out : UInt<1>, ctrl_MemRd_out : UInt<1>, ctrl_Reg_W_out : UInt<1>, ctrl_MemToReg_out : UInt<1>, ctrl_AluOp_out : UInt<3>, ctrl_OpA_out : UInt<2>, ctrl_OpB_out : UInt<1>, ctrl_nextpc_out : UInt<2>, IFID_pc4_out : UInt<32>}
    
    reg io_rs1_out_REG : UInt, clock @[ID_EX.scala 46:36]
    io_rs1_out_REG <= io.rs1_in @[ID_EX.scala 46:36]
    io.rs1_out <= io_rs1_out_REG @[ID_EX.scala 46:25]
    reg io_rs2_out_REG : UInt, clock @[ID_EX.scala 47:36]
    io_rs2_out_REG <= io.rs2_in @[ID_EX.scala 47:36]
    io.rs2_out <= io_rs2_out_REG @[ID_EX.scala 47:25]
    reg io_rs1_data_out_REG : SInt, clock @[ID_EX.scala 48:36]
    io_rs1_data_out_REG <= io.rs1_data_in @[ID_EX.scala 48:36]
    io.rs1_data_out <= io_rs1_data_out_REG @[ID_EX.scala 48:25]
    reg io_rs2_data_out_REG : SInt, clock @[ID_EX.scala 49:36]
    io_rs2_data_out_REG <= io.rs2_data_in @[ID_EX.scala 49:36]
    io.rs2_data_out <= io_rs2_data_out_REG @[ID_EX.scala 49:25]
    reg io_imm_out_REG : SInt, clock @[ID_EX.scala 50:36]
    io_imm_out_REG <= io.imm @[ID_EX.scala 50:36]
    io.imm_out <= io_imm_out_REG @[ID_EX.scala 50:25]
    reg io_rd_out_REG : UInt, clock @[ID_EX.scala 51:36]
    io_rd_out_REG <= io.rd_in @[ID_EX.scala 51:36]
    io.rd_out <= io_rd_out_REG @[ID_EX.scala 51:25]
    reg io_func3_out_REG : UInt, clock @[ID_EX.scala 52:36]
    io_func3_out_REG <= io.func3_in @[ID_EX.scala 52:36]
    io.func3_out <= io_func3_out_REG @[ID_EX.scala 52:25]
    reg io_func7_out_REG : UInt<1>, clock @[ID_EX.scala 53:36]
    io_func7_out_REG <= io.func7_in @[ID_EX.scala 53:36]
    io.func7_out <= io_func7_out_REG @[ID_EX.scala 53:25]
    reg io_ctrl_MemWr_out_REG : UInt<1>, clock @[ID_EX.scala 54:36]
    io_ctrl_MemWr_out_REG <= io.ctrl_MemWr_in @[ID_EX.scala 54:36]
    io.ctrl_MemWr_out <= io_ctrl_MemWr_out_REG @[ID_EX.scala 54:25]
    reg io_ctrl_Branch_out_REG : UInt<1>, clock @[ID_EX.scala 55:36]
    io_ctrl_Branch_out_REG <= io.ctrl_Branch_in @[ID_EX.scala 55:36]
    io.ctrl_Branch_out <= io_ctrl_Branch_out_REG @[ID_EX.scala 55:25]
    reg io_ctrl_MemRd_out_REG : UInt<1>, clock @[ID_EX.scala 56:36]
    io_ctrl_MemRd_out_REG <= io.ctrl_MemRd_in @[ID_EX.scala 56:36]
    io.ctrl_MemRd_out <= io_ctrl_MemRd_out_REG @[ID_EX.scala 56:25]
    reg io_ctrl_Reg_W_out_REG : UInt<1>, clock @[ID_EX.scala 57:36]
    io_ctrl_Reg_W_out_REG <= io.ctrl_Reg_W_in @[ID_EX.scala 57:36]
    io.ctrl_Reg_W_out <= io_ctrl_Reg_W_out_REG @[ID_EX.scala 57:25]
    reg io_ctrl_MemToReg_out_REG : UInt<1>, clock @[ID_EX.scala 58:36]
    io_ctrl_MemToReg_out_REG <= io.ctrl_MemToReg_in @[ID_EX.scala 58:36]
    io.ctrl_MemToReg_out <= io_ctrl_MemToReg_out_REG @[ID_EX.scala 58:25]
    reg io_ctrl_AluOp_out_REG : UInt, clock @[ID_EX.scala 59:36]
    io_ctrl_AluOp_out_REG <= io.ctrl_AluOp_in @[ID_EX.scala 59:36]
    io.ctrl_AluOp_out <= io_ctrl_AluOp_out_REG @[ID_EX.scala 59:25]
    reg io_ctrl_OpA_out_REG : UInt, clock @[ID_EX.scala 60:36]
    io_ctrl_OpA_out_REG <= io.ctrl_OpA_in @[ID_EX.scala 60:36]
    io.ctrl_OpA_out <= io_ctrl_OpA_out_REG @[ID_EX.scala 60:25]
    reg io_ctrl_OpB_out_REG : UInt<1>, clock @[ID_EX.scala 61:36]
    io_ctrl_OpB_out_REG <= io.ctrl_OpB_in @[ID_EX.scala 61:36]
    io.ctrl_OpB_out <= io_ctrl_OpB_out_REG @[ID_EX.scala 61:25]
    reg io_ctrl_nextpc_out_REG : UInt, clock @[ID_EX.scala 62:36]
    io_ctrl_nextpc_out_REG <= io.ctrl_nextpc_in @[ID_EX.scala 62:36]
    io.ctrl_nextpc_out <= io_ctrl_nextpc_out_REG @[ID_EX.scala 62:25]
    reg io_IFID_pc4_out_REG : UInt, clock @[ID_EX.scala 63:36]
    io_IFID_pc4_out_REG <= io.IFID_pc4_in @[ID_EX.scala 63:36]
    io.IFID_pc4_out <= io_IFID_pc4_out_REG @[ID_EX.scala 63:25]
    
  module EX_MEM : 
    input clock : Clock
    input reset : Reset
    output io : {flip IDEX_MEMRD : UInt<1>, flip IDEX_MEMWR : UInt<1>, flip IDEX_MEMTOREG : UInt<1>, flip IDEX_REG_W : UInt<1>, flip IDEX_rs2 : SInt<32>, flip IDEX_rd : UInt<5>, flip alu_out : SInt<32>, EXMEM_memRd_out : UInt<1>, EXMEM_memWr_out : UInt<1>, EXMEM_memToReg_out : UInt<1>, EXMEM_reg_w_out : UInt<1>, EXMEM_rs2_out : SInt<32>, EXMEM_rd_out : UInt<5>, EXMEM_alu_out : SInt<32>}
    
    reg io_EXMEM_memRd_out_REG : UInt<1>, clock @[EX_MEM.scala 25:39]
    io_EXMEM_memRd_out_REG <= io.IDEX_MEMRD @[EX_MEM.scala 25:39]
    io.EXMEM_memRd_out <= io_EXMEM_memRd_out_REG @[EX_MEM.scala 25:29]
    reg io_EXMEM_memWr_out_REG : UInt<1>, clock @[EX_MEM.scala 26:39]
    io_EXMEM_memWr_out_REG <= io.IDEX_MEMWR @[EX_MEM.scala 26:39]
    io.EXMEM_memWr_out <= io_EXMEM_memWr_out_REG @[EX_MEM.scala 26:29]
    reg io_EXMEM_memToReg_out_REG : UInt<1>, clock @[EX_MEM.scala 27:39]
    io_EXMEM_memToReg_out_REG <= io.IDEX_MEMTOREG @[EX_MEM.scala 27:39]
    io.EXMEM_memToReg_out <= io_EXMEM_memToReg_out_REG @[EX_MEM.scala 27:29]
    reg io_EXMEM_reg_w_out_REG : UInt<1>, clock @[EX_MEM.scala 28:39]
    io_EXMEM_reg_w_out_REG <= io.IDEX_REG_W @[EX_MEM.scala 28:39]
    io.EXMEM_reg_w_out <= io_EXMEM_reg_w_out_REG @[EX_MEM.scala 28:29]
    reg io_EXMEM_rs2_out_REG : SInt, clock @[EX_MEM.scala 29:39]
    io_EXMEM_rs2_out_REG <= io.IDEX_rs2 @[EX_MEM.scala 29:39]
    io.EXMEM_rs2_out <= io_EXMEM_rs2_out_REG @[EX_MEM.scala 29:29]
    reg io_EXMEM_rd_out_REG : UInt, clock @[EX_MEM.scala 30:39]
    io_EXMEM_rd_out_REG <= io.IDEX_rd @[EX_MEM.scala 30:39]
    io.EXMEM_rd_out <= io_EXMEM_rd_out_REG @[EX_MEM.scala 30:29]
    reg io_EXMEM_alu_out_REG : SInt, clock @[EX_MEM.scala 31:39]
    io_EXMEM_alu_out_REG <= io.alu_out @[EX_MEM.scala 31:39]
    io.EXMEM_alu_out <= io_EXMEM_alu_out_REG @[EX_MEM.scala 31:29]
    
  module MEM_WB : 
    input clock : Clock
    input reset : Reset
    output io : {flip EXMEM_MEMTOREG : UInt<1>, flip EXMEM_REG_W : UInt<1>, flip EXMEM_MEMRD : UInt<1>, flip EXMEM_rd : UInt<5>, flip in_dataMem_out : SInt<32>, flip in_alu_out : SInt<32>, MEMWB_memToReg_out : UInt<1>, MEMWB_reg_w_out : UInt<1>, MEMWB_memRd_out : UInt<1>, MEMWB_rd_out : UInt<5>, MEMWB_dataMem_out : SInt<32>, MEMWB_alu_out : SInt<32>}
    
    reg io_MEMWB_memToReg_out_REG : UInt<1>, clock @[MEM_WB.scala 23:39]
    io_MEMWB_memToReg_out_REG <= io.EXMEM_MEMTOREG @[MEM_WB.scala 23:39]
    io.MEMWB_memToReg_out <= io_MEMWB_memToReg_out_REG @[MEM_WB.scala 23:29]
    reg io_MEMWB_reg_w_out_REG : UInt<1>, clock @[MEM_WB.scala 24:39]
    io_MEMWB_reg_w_out_REG <= io.EXMEM_REG_W @[MEM_WB.scala 24:39]
    io.MEMWB_reg_w_out <= io_MEMWB_reg_w_out_REG @[MEM_WB.scala 24:29]
    reg io_MEMWB_memRd_out_REG : UInt<1>, clock @[MEM_WB.scala 25:39]
    io_MEMWB_memRd_out_REG <= io.EXMEM_MEMRD @[MEM_WB.scala 25:39]
    io.MEMWB_memRd_out <= io_MEMWB_memRd_out_REG @[MEM_WB.scala 25:29]
    reg io_MEMWB_rd_out_REG : UInt, clock @[MEM_WB.scala 26:39]
    io_MEMWB_rd_out_REG <= io.EXMEM_rd @[MEM_WB.scala 26:39]
    io.MEMWB_rd_out <= io_MEMWB_rd_out_REG @[MEM_WB.scala 26:29]
    reg io_MEMWB_dataMem_out_REG : SInt, clock @[MEM_WB.scala 27:39]
    io_MEMWB_dataMem_out_REG <= io.in_dataMem_out @[MEM_WB.scala 27:39]
    io.MEMWB_dataMem_out <= io_MEMWB_dataMem_out_REG @[MEM_WB.scala 27:29]
    reg io_MEMWB_alu_out_REG : SInt, clock @[MEM_WB.scala 28:39]
    io_MEMWB_alu_out_REG <= io.in_alu_out @[MEM_WB.scala 28:39]
    io.MEMWB_alu_out <= io_MEMWB_alu_out_REG @[MEM_WB.scala 28:29]
    
  module PC : 
    input clock : Clock
    input reset : Reset
    output io : {flip in : SInt<32>, out : SInt<32>}
    
    reg PC : SInt<32>, clock with : (reset => (reset, asSInt(UInt<32>("h00")))) @[PC.scala 11:21]
    io.out <= PC @[PC.scala 12:12]
    PC <= io.in @[PC.scala 13:8]
    
  module PC4 : 
    input clock : Clock
    input reset : Reset
    output io : {flip pc : UInt<32>, out : UInt<32>}
    
    io.out <= UInt<1>("h00") @[PC4.scala 10:12]
    node _io_out_T = add(io.pc, UInt<32>("h04")) @[PC4.scala 11:21]
    node _io_out_T_1 = tail(_io_out_T, 1) @[PC4.scala 11:21]
    io.out <= _io_out_T_1 @[PC4.scala 11:12]
    
  module InstMem : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, data : UInt<32>}
    
    cmem imem : UInt<32>[1024] @[InstMem.scala 12:17]
    node _io_data_T = div(io.addr, UInt<3>("h04")) @[InstMem.scala 14:26]
    node _io_data_T_1 = bits(_io_data_T, 9, 0) @[InstMem.scala 14:18]
    infer mport io_data_MPORT = imem[_io_data_T_1], clock @[InstMem.scala 14:18]
    io.data <= io_data_MPORT @[InstMem.scala 14:11]
    
  module DataMemory : 
    input clock : Clock
    input reset : Reset
    output io : {flip addr : UInt<32>, flip dataIn : SInt<32>, flip mem_read : UInt<1>, flip mem_write : UInt<1>, dataOut : SInt<32>}
    
    cmem Dmemory : SInt<32>[1024] @[DataMemory.scala 13:20]
    io.dataOut <= asSInt(UInt<1>("h00")) @[DataMemory.scala 14:14]
    when io.mem_write : @[DataMemory.scala 16:22]
      node _T = bits(io.addr, 9, 0)
      write mport MPORT = Dmemory[_T], clock
      MPORT <= io.dataIn
      skip @[DataMemory.scala 16:22]
    when io.mem_read : @[DataMemory.scala 19:21]
      node _io_dataOut_T = bits(io.addr, 9, 0) @[DataMemory.scala 20:31]
      read mport io_dataOut_MPORT = Dmemory[_io_dataOut_T], clock @[DataMemory.scala 20:31]
      io.dataOut <= io_dataOut_MPORT @[DataMemory.scala 20:16]
      skip @[DataMemory.scala 19:21]
    
  module Control : 
    input clock : Clock
    input reset : Reset
    output io : {flip opcode : UInt<7>, mem_write : UInt<1>, branch : UInt<1>, mem_read : UInt<1>, reg_write : UInt<1>, men_to_reg : UInt<1>, alu_operation : UInt<3>, operand_A : UInt<2>, operand_B : UInt<1>, extend : UInt<2>, next_pc_sel : UInt<2>}
    
    io.mem_write <= UInt<1>("h00") @[Control.scala 21:16]
    io.branch <= UInt<1>("h00") @[Control.scala 22:13]
    io.mem_read <= UInt<1>("h00") @[Control.scala 23:15]
    io.reg_write <= UInt<1>("h00") @[Control.scala 24:16]
    io.men_to_reg <= UInt<1>("h00") @[Control.scala 25:17]
    io.alu_operation <= UInt<1>("h00") @[Control.scala 26:20]
    io.operand_A <= UInt<1>("h00") @[Control.scala 27:16]
    io.operand_B <= UInt<1>("h00") @[Control.scala 28:16]
    io.extend <= UInt<1>("h00") @[Control.scala 29:13]
    io.next_pc_sel <= UInt<1>("h00") @[Control.scala 30:18]
    node _T = eq(UInt<6>("h033"), io.opcode) @[Conditional.scala 37:30]
    when _T : @[Conditional.scala 40:58]
      io.mem_write <= UInt<1>("h00") @[Control.scala 35:20]
      io.branch <= UInt<1>("h00") @[Control.scala 36:17]
      io.mem_read <= UInt<1>("h00") @[Control.scala 37:19]
      io.reg_write <= UInt<1>("h01") @[Control.scala 38:20]
      io.men_to_reg <= UInt<1>("h00") @[Control.scala 39:21]
      io.alu_operation <= UInt<1>("h00") @[Control.scala 40:24]
      io.operand_A <= UInt<1>("h00") @[Control.scala 41:20]
      io.operand_B <= UInt<1>("h00") @[Control.scala 42:20]
      io.extend <= UInt<1>("h00") @[Control.scala 43:17]
      io.next_pc_sel <= UInt<1>("h00") @[Control.scala 44:22]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_1 = eq(UInt<5>("h013"), io.opcode) @[Conditional.scala 37:30]
      when _T_1 : @[Conditional.scala 39:67]
        io.mem_write <= UInt<1>("h00") @[Control.scala 49:20]
        io.branch <= UInt<1>("h00") @[Control.scala 50:17]
        io.mem_read <= UInt<1>("h00") @[Control.scala 51:19]
        io.reg_write <= UInt<1>("h01") @[Control.scala 52:20]
        io.men_to_reg <= UInt<1>("h00") @[Control.scala 53:21]
        io.alu_operation <= UInt<1>("h01") @[Control.scala 54:24]
        io.operand_A <= UInt<1>("h00") @[Control.scala 55:20]
        io.operand_B <= UInt<1>("h01") @[Control.scala 56:20]
        io.extend <= UInt<1>("h00") @[Control.scala 57:17]
        io.next_pc_sel <= UInt<1>("h00") @[Control.scala 58:22]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_2 = eq(UInt<6>("h023"), io.opcode) @[Conditional.scala 37:30]
        when _T_2 : @[Conditional.scala 39:67]
          io.mem_write <= UInt<1>("h01") @[Control.scala 63:20]
          io.branch <= UInt<1>("h00") @[Control.scala 64:17]
          io.mem_read <= UInt<1>("h00") @[Control.scala 65:19]
          io.reg_write <= UInt<1>("h00") @[Control.scala 66:20]
          io.men_to_reg <= UInt<1>("h00") @[Control.scala 67:21]
          io.alu_operation <= UInt<3>("h05") @[Control.scala 68:24]
          io.operand_A <= UInt<1>("h00") @[Control.scala 69:20]
          io.operand_B <= UInt<1>("h01") @[Control.scala 70:20]
          io.extend <= UInt<1>("h01") @[Control.scala 71:17]
          io.next_pc_sel <= UInt<1>("h00") @[Control.scala 72:22]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_3 = eq(UInt<2>("h03"), io.opcode) @[Conditional.scala 37:30]
          when _T_3 : @[Conditional.scala 39:67]
            io.mem_write <= UInt<1>("h00") @[Control.scala 77:20]
            io.branch <= UInt<1>("h00") @[Control.scala 78:17]
            io.mem_read <= UInt<1>("h01") @[Control.scala 79:19]
            io.reg_write <= UInt<1>("h01") @[Control.scala 80:20]
            io.men_to_reg <= UInt<1>("h01") @[Control.scala 81:21]
            io.alu_operation <= UInt<3>("h04") @[Control.scala 82:24]
            io.operand_A <= UInt<1>("h00") @[Control.scala 83:20]
            io.operand_B <= UInt<1>("h01") @[Control.scala 84:20]
            io.extend <= UInt<1>("h00") @[Control.scala 85:17]
            io.next_pc_sel <= UInt<1>("h00") @[Control.scala 86:22]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_4 = eq(UInt<7>("h063"), io.opcode) @[Conditional.scala 37:30]
            when _T_4 : @[Conditional.scala 39:67]
              io.mem_write <= UInt<1>("h00") @[Control.scala 91:20]
              io.branch <= UInt<1>("h01") @[Control.scala 92:17]
              io.mem_read <= UInt<1>("h00") @[Control.scala 93:19]
              io.reg_write <= UInt<1>("h00") @[Control.scala 94:20]
              io.men_to_reg <= UInt<1>("h00") @[Control.scala 95:21]
              io.alu_operation <= UInt<2>("h02") @[Control.scala 96:24]
              io.operand_A <= UInt<1>("h00") @[Control.scala 97:20]
              io.operand_B <= UInt<1>("h00") @[Control.scala 98:20]
              io.extend <= UInt<1>("h00") @[Control.scala 99:17]
              io.next_pc_sel <= UInt<1>("h01") @[Control.scala 100:22]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_5 = eq(UInt<7>("h06f"), io.opcode) @[Conditional.scala 37:30]
              when _T_5 : @[Conditional.scala 39:67]
                io.mem_write <= UInt<1>("h00") @[Control.scala 105:20]
                io.branch <= UInt<1>("h00") @[Control.scala 106:17]
                io.mem_read <= UInt<1>("h00") @[Control.scala 107:19]
                io.reg_write <= UInt<1>("h01") @[Control.scala 108:20]
                io.men_to_reg <= UInt<1>("h00") @[Control.scala 109:21]
                io.alu_operation <= UInt<2>("h03") @[Control.scala 110:24]
                io.operand_A <= UInt<1>("h01") @[Control.scala 111:20]
                io.operand_B <= UInt<1>("h00") @[Control.scala 112:20]
                io.extend <= UInt<1>("h00") @[Control.scala 113:17]
                io.next_pc_sel <= UInt<2>("h02") @[Control.scala 114:22]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_6 = eq(UInt<7>("h067"), io.opcode) @[Conditional.scala 37:30]
                when _T_6 : @[Conditional.scala 39:67]
                  io.mem_write <= UInt<1>("h00") @[Control.scala 119:20]
                  io.branch <= UInt<1>("h00") @[Control.scala 120:17]
                  io.mem_read <= UInt<1>("h00") @[Control.scala 121:19]
                  io.reg_write <= UInt<1>("h01") @[Control.scala 122:20]
                  io.men_to_reg <= UInt<1>("h00") @[Control.scala 123:21]
                  io.alu_operation <= UInt<2>("h03") @[Control.scala 124:24]
                  io.operand_A <= UInt<1>("h01") @[Control.scala 125:20]
                  io.operand_B <= UInt<1>("h00") @[Control.scala 126:20]
                  io.extend <= UInt<1>("h00") @[Control.scala 127:17]
                  io.next_pc_sel <= UInt<2>("h03") @[Control.scala 128:22]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_7 = eq(UInt<6>("h037"), io.opcode) @[Conditional.scala 37:30]
                  when _T_7 : @[Conditional.scala 39:67]
                    io.mem_write <= UInt<1>("h00") @[Control.scala 133:20]
                    io.branch <= UInt<1>("h00") @[Control.scala 134:17]
                    io.mem_read <= UInt<1>("h00") @[Control.scala 135:19]
                    io.reg_write <= UInt<1>("h01") @[Control.scala 136:20]
                    io.men_to_reg <= UInt<1>("h00") @[Control.scala 137:21]
                    io.alu_operation <= UInt<3>("h06") @[Control.scala 138:24]
                    io.operand_A <= UInt<2>("h03") @[Control.scala 139:20]
                    io.operand_B <= UInt<1>("h01") @[Control.scala 140:20]
                    io.extend <= UInt<2>("h02") @[Control.scala 141:17]
                    io.next_pc_sel <= UInt<1>("h00") @[Control.scala 142:22]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_8 = eq(UInt<5>("h017"), io.opcode) @[Conditional.scala 37:30]
                    when _T_8 : @[Conditional.scala 39:67]
                      io.mem_write <= UInt<1>("h00") @[Control.scala 147:20]
                      io.branch <= UInt<1>("h00") @[Control.scala 148:17]
                      io.mem_read <= UInt<1>("h00") @[Control.scala 149:19]
                      io.reg_write <= UInt<1>("h01") @[Control.scala 150:20]
                      io.men_to_reg <= UInt<1>("h00") @[Control.scala 151:21]
                      io.alu_operation <= UInt<3>("h07") @[Control.scala 152:24]
                      io.operand_A <= UInt<2>("h02") @[Control.scala 153:20]
                      io.operand_B <= UInt<1>("h01") @[Control.scala 154:20]
                      io.extend <= UInt<2>("h02") @[Control.scala 155:17]
                      io.next_pc_sel <= UInt<1>("h00") @[Control.scala 156:22]
                      skip @[Conditional.scala 39:67]
    
  module ImmGenerator : 
    input clock : Clock
    input reset : Reset
    output io : {flip instr : UInt<32>, flip pc : UInt<32>, I_type : SInt<32>, S_type : SInt<32>, SB_type : SInt<32>, U_type : SInt<32>, UJ_type : SInt<32>}
    
    node _io_I_type_T = bits(io.instr, 31, 31) @[ImmGenerator.scala 18:37]
    node _io_I_type_T_1 = bits(_io_I_type_T, 0, 0) @[Bitwise.scala 72:15]
    node io_I_type_hi = mux(_io_I_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_I_type_lo = bits(io.instr, 31, 20) @[ImmGenerator.scala 18:52]
    node _io_I_type_T_2 = cat(io_I_type_hi, io_I_type_lo) @[Cat.scala 30:58]
    node _io_I_type_T_3 = asSInt(_io_I_type_T_2) @[ImmGenerator.scala 18:62]
    io.I_type <= _io_I_type_T_3 @[ImmGenerator.scala 18:13]
    node _io_S_type_T = bits(io.instr, 31, 31) @[ImmGenerator.scala 21:37]
    node _io_S_type_T_1 = bits(_io_S_type_T, 0, 0) @[Bitwise.scala 72:15]
    node io_S_type_hi_hi = mux(_io_S_type_T_1, UInt<20>("h0fffff"), UInt<20>("h00")) @[Bitwise.scala 72:12]
    node io_S_type_hi_lo = bits(io.instr, 31, 25) @[ImmGenerator.scala 21:52]
    node io_S_type_lo = bits(io.instr, 11, 7) @[ImmGenerator.scala 21:70]
    node io_S_type_hi = cat(io_S_type_hi_hi, io_S_type_hi_lo) @[Cat.scala 30:58]
    node _io_S_type_T_2 = cat(io_S_type_hi, io_S_type_lo) @[Cat.scala 30:58]
    node _io_S_type_T_3 = asSInt(_io_S_type_T_2) @[ImmGenerator.scala 21:79]
    io.S_type <= _io_S_type_T_3 @[ImmGenerator.scala 21:13]
    node _sbImm_T = bits(io.instr, 31, 31) @[ImmGenerator.scala 24:36]
    node _sbImm_T_1 = bits(_sbImm_T, 0, 0) @[Bitwise.scala 72:15]
    node sbImm_hi_hi_hi = mux(_sbImm_T_1, UInt<19>("h07ffff"), UInt<19>("h00")) @[Bitwise.scala 72:12]
    node sbImm_hi_hi_lo = bits(io.instr, 31, 31) @[ImmGenerator.scala 24:51]
    node sbImm_hi_lo = bits(io.instr, 7, 7) @[ImmGenerator.scala 24:65]
    node sbImm_lo_hi_hi = bits(io.instr, 30, 25) @[ImmGenerator.scala 24:78]
    node sbImm_lo_hi_lo = bits(io.instr, 11, 8) @[ImmGenerator.scala 24:96]
    node sbImm_lo_hi = cat(sbImm_lo_hi_hi, sbImm_lo_hi_lo) @[Cat.scala 30:58]
    node sbImm_lo = cat(sbImm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node sbImm_hi_hi = cat(sbImm_hi_hi_hi, sbImm_hi_hi_lo) @[Cat.scala 30:58]
    node sbImm_hi = cat(sbImm_hi_hi, sbImm_hi_lo) @[Cat.scala 30:58]
    node _sbImm_T_2 = cat(sbImm_hi, sbImm_lo) @[Cat.scala 30:58]
    node sbImm = asSInt(_sbImm_T_2) @[ImmGenerator.scala 24:115]
    node _io_SB_type_T = asSInt(io.pc) @[ImmGenerator.scala 25:31]
    node _io_SB_type_T_1 = add(sbImm, _io_SB_type_T) @[ImmGenerator.scala 25:23]
    node _io_SB_type_T_2 = tail(_io_SB_type_T_1, 1) @[ImmGenerator.scala 25:23]
    node _io_SB_type_T_3 = asSInt(_io_SB_type_T_2) @[ImmGenerator.scala 25:23]
    io.SB_type <= _io_SB_type_T_3 @[ImmGenerator.scala 25:14]
    node io_U_type_hi = bits(io.instr, 31, 12) @[ImmGenerator.scala 28:28]
    node io_U_type_lo = mux(UInt<1>("h00"), UInt<12>("h0fff"), UInt<12>("h00")) @[Bitwise.scala 72:12]
    node _io_U_type_T = cat(io_U_type_hi, io_U_type_lo) @[Cat.scala 30:58]
    node _io_U_type_T_1 = asSInt(_io_U_type_T) @[ImmGenerator.scala 28:53]
    io.U_type <= _io_U_type_T_1 @[ImmGenerator.scala 28:13]
    node _ujImm_T = bits(io.instr, 31, 31) @[ImmGenerator.scala 31:36]
    node _ujImm_T_1 = bits(_ujImm_T, 0, 0) @[Bitwise.scala 72:15]
    node ujImm_hi_hi_hi = mux(_ujImm_T_1, UInt<11>("h07ff"), UInt<11>("h00")) @[Bitwise.scala 72:12]
    node ujImm_hi_hi_lo = bits(io.instr, 31, 31) @[ImmGenerator.scala 31:51]
    node ujImm_hi_lo = bits(io.instr, 19, 12) @[ImmGenerator.scala 31:65]
    node ujImm_lo_hi_hi = bits(io.instr, 20, 20) @[ImmGenerator.scala 31:83]
    node ujImm_lo_hi_lo = bits(io.instr, 30, 21) @[ImmGenerator.scala 31:97]
    node ujImm_lo_hi = cat(ujImm_lo_hi_hi, ujImm_lo_hi_lo) @[Cat.scala 30:58]
    node ujImm_lo = cat(ujImm_lo_hi, UInt<1>("h00")) @[Cat.scala 30:58]
    node ujImm_hi_hi = cat(ujImm_hi_hi_hi, ujImm_hi_hi_lo) @[Cat.scala 30:58]
    node ujImm_hi = cat(ujImm_hi_hi, ujImm_hi_lo) @[Cat.scala 30:58]
    node _ujImm_T_2 = cat(ujImm_hi, ujImm_lo) @[Cat.scala 30:58]
    node ujImm = asSInt(_ujImm_T_2) @[ImmGenerator.scala 31:117]
    node _io_UJ_type_T = asSInt(io.pc) @[ImmGenerator.scala 32:31]
    node _io_UJ_type_T_1 = add(ujImm, _io_UJ_type_T) @[ImmGenerator.scala 32:23]
    node _io_UJ_type_T_2 = tail(_io_UJ_type_T_1, 1) @[ImmGenerator.scala 32:23]
    node _io_UJ_type_T_3 = asSInt(_io_UJ_type_T_2) @[ImmGenerator.scala 32:23]
    io.UJ_type <= _io_UJ_type_T_3 @[ImmGenerator.scala 32:14]
    
  module RegisterFile : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip reg_write : UInt<1>, flip w_reg : UInt<5>, flip w_data : SInt<32>, rdata1 : SInt<32>, rdata2 : SInt<32>}
    
    wire _regfile_WIRE : SInt<32>[32] @[RegisterFile.scala 15:32]
    _regfile_WIRE[0] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[1] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[2] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[3] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[4] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[5] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[6] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[7] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[8] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[9] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[10] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[11] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[12] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[13] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[14] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[15] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[16] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[17] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[18] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[19] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[20] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[21] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[22] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[23] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[24] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[25] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[26] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[27] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[28] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[29] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[30] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    _regfile_WIRE[31] <= asSInt(UInt<32>("h00")) @[RegisterFile.scala 15:32]
    reg regfile : SInt<32>[32], clock with : (reset => (reset, _regfile_WIRE)) @[RegisterFile.scala 15:24]
    node _io_rdata1_T = eq(io.rs1, UInt<1>("h00")) @[RegisterFile.scala 17:27]
    node _io_rdata1_T_1 = mux(_io_rdata1_T, asSInt(UInt<1>("h00")), regfile[io.rs1]) @[RegisterFile.scala 17:19]
    io.rdata1 <= _io_rdata1_T_1 @[RegisterFile.scala 17:13]
    node _io_rdata2_T = eq(io.rs2, UInt<1>("h00")) @[RegisterFile.scala 18:27]
    node _io_rdata2_T_1 = mux(_io_rdata2_T, asSInt(UInt<1>("h00")), regfile[io.rs2]) @[RegisterFile.scala 18:19]
    io.rdata2 <= _io_rdata2_T_1 @[RegisterFile.scala 18:13]
    node _T = neq(io.w_reg, UInt<1>("h00")) @[RegisterFile.scala 20:33]
    node _T_1 = and(io.reg_write, _T) @[RegisterFile.scala 20:21]
    when _T_1 : @[RegisterFile.scala 20:42]
      regfile[io.w_reg] <= io.w_data @[RegisterFile.scala 21:23]
      skip @[RegisterFile.scala 20:42]
    
  module AluControl : 
    input clock : Clock
    input reset : Reset
    output io : {flip func3 : UInt<3>, flip func7 : UInt<1>, flip aluOp : UInt<3>, out : UInt<5>}
    
    io.out <= UInt<1>("h00") @[Alu_Control.scala 12:10]
    node _T = eq(io.aluOp, UInt<1>("h00")) @[Alu_Control.scala 15:17]
    when _T : @[Alu_Control.scala 15:26]
      node io_out_hi = cat(UInt<2>("h00"), io.func7) @[Cat.scala 30:58]
      node _io_out_T = cat(io_out_hi, io.func3) @[Cat.scala 30:58]
      io.out <= _io_out_T @[Alu_Control.scala 16:12]
      skip @[Alu_Control.scala 15:26]
    else : @[Alu_Control.scala 19:32]
      node _T_1 = eq(io.aluOp, UInt<1>("h01")) @[Alu_Control.scala 19:23]
      when _T_1 : @[Alu_Control.scala 19:32]
        node _io_out_T_1 = cat(UInt<2>("h00"), io.func3) @[Cat.scala 30:58]
        io.out <= _io_out_T_1 @[Alu_Control.scala 20:12]
        skip @[Alu_Control.scala 19:32]
      else : @[Alu_Control.scala 23:32]
        node _T_2 = eq(io.aluOp, UInt<2>("h02")) @[Alu_Control.scala 23:23]
        when _T_2 : @[Alu_Control.scala 23:32]
          node _io_out_T_2 = cat(UInt<3>("h02"), io.func3) @[Cat.scala 30:58]
          io.out <= _io_out_T_2 @[Alu_Control.scala 24:12]
          skip @[Alu_Control.scala 23:32]
        else : @[Alu_Control.scala 27:32]
          node _T_3 = eq(io.aluOp, UInt<2>("h03")) @[Alu_Control.scala 27:23]
          when _T_3 : @[Alu_Control.scala 27:32]
            io.out <= UInt<5>("h01f") @[Alu_Control.scala 28:12]
            skip @[Alu_Control.scala 27:32]
          else : @[Alu_Control.scala 31:92]
            node _T_4 = eq(io.aluOp, UInt<3>("h04")) @[Alu_Control.scala 31:23]
            node _T_5 = eq(io.aluOp, UInt<3>("h05")) @[Alu_Control.scala 31:43]
            node _T_6 = or(_T_4, _T_5) @[Alu_Control.scala 31:31]
            node _T_7 = eq(io.aluOp, UInt<3>("h06")) @[Alu_Control.scala 31:63]
            node _T_8 = or(_T_6, _T_7) @[Alu_Control.scala 31:51]
            node _T_9 = eq(io.aluOp, UInt<3>("h07")) @[Alu_Control.scala 31:83]
            node _T_10 = or(_T_8, _T_9) @[Alu_Control.scala 31:71]
            when _T_10 : @[Alu_Control.scala 31:92]
              io.out <= UInt<1>("h00") @[Alu_Control.scala 32:12]
              skip @[Alu_Control.scala 31:92]
            else : @[Alu_Control.scala 34:16]
              io.out <= UInt<1>("h00") @[Alu_Control.scala 35:12]
              skip @[Alu_Control.scala 34:16]
    
  module ALU : 
    input clock : Clock
    input reset : Reset
    output io : {flip in_A : SInt<32>, flip in_B : SInt<32>, flip alu_Op : UInt<5>, out : SInt<32>}
    
    wire result : SInt<32>
    result <= asSInt(UInt<32>("h00"))
    node _T = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_1 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_2 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_3 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_4 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_5 = eq(UInt<5>("h00"), io.alu_Op) @[Conditional.scala 37:30]
    node _T_6 = or(_T, _T_1) @[Conditional.scala 37:55]
    node _T_7 = or(_T_6, _T_2) @[Conditional.scala 37:55]
    node _T_8 = or(_T_7, _T_3) @[Conditional.scala 37:55]
    node _T_9 = or(_T_8, _T_4) @[Conditional.scala 37:55]
    node _T_10 = or(_T_9, _T_5) @[Conditional.scala 37:55]
    when _T_10 : @[Conditional.scala 40:58]
      node _result_T = add(io.in_A, io.in_B) @[Alu.scala 45:25]
      node _result_T_1 = tail(_result_T, 1) @[Alu.scala 45:25]
      node _result_T_2 = asSInt(_result_T_1) @[Alu.scala 45:25]
      result <= _result_T_2 @[Alu.scala 45:14]
      skip @[Conditional.scala 40:58]
    else : @[Conditional.scala 39:67]
      node _T_11 = eq(UInt<5>("h01"), io.alu_Op) @[Conditional.scala 37:30]
      node _T_12 = eq(UInt<5>("h01"), io.alu_Op) @[Conditional.scala 37:30]
      node _T_13 = or(_T_11, _T_12) @[Conditional.scala 37:55]
      when _T_13 : @[Conditional.scala 39:67]
        node _result_T_3 = asUInt(io.in_A) @[Alu.scala 48:26]
        node _result_T_4 = bits(io.in_B, 4, 0) @[Alu.scala 48:43]
        node _result_T_5 = dshl(_result_T_3, _result_T_4) @[Alu.scala 48:33]
        node _result_T_6 = asSInt(_result_T_5) @[Alu.scala 48:51]
        result <= _result_T_6 @[Alu.scala 48:14]
        skip @[Conditional.scala 39:67]
      else : @[Conditional.scala 39:67]
        node _T_14 = eq(UInt<5>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        node _T_15 = eq(UInt<5>("h02"), io.alu_Op) @[Conditional.scala 37:30]
        node _T_16 = or(_T_14, _T_15) @[Conditional.scala 37:55]
        when _T_16 : @[Conditional.scala 39:67]
          node _result_T_7 = lt(io.in_A, io.in_B) @[Alu.scala 51:29]
          node _result_T_8 = mux(_result_T_7, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Alu.scala 51:20]
          result <= _result_T_8 @[Alu.scala 51:14]
          skip @[Conditional.scala 39:67]
        else : @[Conditional.scala 39:67]
          node _T_17 = eq(UInt<5>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          node _T_18 = eq(UInt<5>("h03"), io.alu_Op) @[Conditional.scala 37:30]
          node _T_19 = or(_T_17, _T_18) @[Conditional.scala 37:55]
          when _T_19 : @[Conditional.scala 39:67]
            node _result_T_9 = asUInt(io.in_A) @[Alu.scala 54:29]
            node _result_T_10 = asUInt(io.in_B) @[Alu.scala 54:46]
            node _result_T_11 = lt(_result_T_9, _result_T_10) @[Alu.scala 54:36]
            node _result_T_12 = mux(_result_T_11, asSInt(UInt<2>("h01")), asSInt(UInt<1>("h00"))) @[Alu.scala 54:20]
            result <= _result_T_12 @[Alu.scala 54:14]
            skip @[Conditional.scala 39:67]
          else : @[Conditional.scala 39:67]
            node _T_20 = eq(UInt<5>("h04"), io.alu_Op) @[Conditional.scala 37:30]
            node _T_21 = eq(UInt<5>("h04"), io.alu_Op) @[Conditional.scala 37:30]
            node _T_22 = or(_T_20, _T_21) @[Conditional.scala 37:55]
            when _T_22 : @[Conditional.scala 39:67]
              node _result_T_13 = xor(io.in_A, io.in_B) @[Alu.scala 57:25]
              node _result_T_14 = asSInt(_result_T_13) @[Alu.scala 57:25]
              result <= _result_T_14 @[Alu.scala 57:14]
              skip @[Conditional.scala 39:67]
            else : @[Conditional.scala 39:67]
              node _T_23 = eq(UInt<5>("h05"), io.alu_Op) @[Conditional.scala 37:30]
              node _T_24 = eq(UInt<5>("h05"), io.alu_Op) @[Conditional.scala 37:30]
              node _T_25 = or(_T_23, _T_24) @[Conditional.scala 37:55]
              when _T_25 : @[Conditional.scala 39:67]
                node _result_T_15 = asUInt(io.in_A) @[Alu.scala 60:26]
                node _result_T_16 = bits(io.in_B, 4, 0) @[Alu.scala 60:43]
                node _result_T_17 = dshr(_result_T_15, _result_T_16) @[Alu.scala 60:33]
                node _result_T_18 = asSInt(_result_T_17) @[Alu.scala 60:51]
                result <= _result_T_18 @[Alu.scala 60:14]
                skip @[Conditional.scala 39:67]
              else : @[Conditional.scala 39:67]
                node _T_26 = eq(UInt<5>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                node _T_27 = eq(UInt<5>("h06"), io.alu_Op) @[Conditional.scala 37:30]
                node _T_28 = or(_T_26, _T_27) @[Conditional.scala 37:55]
                when _T_28 : @[Conditional.scala 39:67]
                  node _result_T_19 = or(io.in_A, io.in_B) @[Alu.scala 63:25]
                  node _result_T_20 = asSInt(_result_T_19) @[Alu.scala 63:25]
                  result <= _result_T_20 @[Alu.scala 63:14]
                  skip @[Conditional.scala 39:67]
                else : @[Conditional.scala 39:67]
                  node _T_29 = eq(UInt<5>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                  node _T_30 = eq(UInt<5>("h07"), io.alu_Op) @[Conditional.scala 37:30]
                  node _T_31 = or(_T_29, _T_30) @[Conditional.scala 37:55]
                  when _T_31 : @[Conditional.scala 39:67]
                    node _result_T_21 = and(io.in_A, io.in_B) @[Alu.scala 66:25]
                    node _result_T_22 = asSInt(_result_T_21) @[Alu.scala 66:25]
                    result <= _result_T_22 @[Alu.scala 66:14]
                    skip @[Conditional.scala 39:67]
                  else : @[Conditional.scala 39:67]
                    node _T_32 = eq(UInt<5>("h08"), io.alu_Op) @[Conditional.scala 37:30]
                    when _T_32 : @[Conditional.scala 39:67]
                      node _result_T_23 = sub(io.in_A, io.in_B) @[Alu.scala 69:25]
                      node _result_T_24 = tail(_result_T_23, 1) @[Alu.scala 69:25]
                      node _result_T_25 = asSInt(_result_T_24) @[Alu.scala 69:25]
                      result <= _result_T_25 @[Alu.scala 69:14]
                      skip @[Conditional.scala 39:67]
                    else : @[Conditional.scala 39:67]
                      node _T_33 = eq(UInt<5>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
                      node _T_34 = eq(UInt<5>("h0d"), io.alu_Op) @[Conditional.scala 37:30]
                      node _T_35 = or(_T_33, _T_34) @[Conditional.scala 37:55]
                      when _T_35 : @[Conditional.scala 39:67]
                        node _result_T_26 = bits(io.in_B, 4, 0) @[Alu.scala 72:36]
                        node _result_T_27 = dshr(io.in_A, _result_T_26) @[Alu.scala 72:26]
                        result <= _result_T_27 @[Alu.scala 72:14]
                        skip @[Conditional.scala 39:67]
                      else : @[Conditional.scala 39:67]
                        node _T_36 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                        node _T_37 = eq(UInt<5>("h01f"), io.alu_Op) @[Conditional.scala 37:30]
                        node _T_38 = or(_T_36, _T_37) @[Conditional.scala 37:55]
                        when _T_38 : @[Conditional.scala 39:67]
                          result <= io.in_A @[Alu.scala 75:14]
                          skip @[Conditional.scala 39:67]
    io.out <= result @[Alu.scala 79:10]
    
  module Branch : 
    input clock : Clock
    input reset : Reset
    output io : {flip fnct3 : UInt<3>, flip branch : UInt<1>, flip arg_x : SInt<32>, flip arg_y : SInt<32>, br_taken : UInt<1>}
    
    io.br_taken <= UInt<1>("h00") @[BRANCH.scala 13:15]
    when io.branch : @[BRANCH.scala 15:19]
      node _T = eq(io.fnct3, UInt<1>("h00")) @[BRANCH.scala 17:19]
      when _T : @[BRANCH.scala 17:28]
        node _io_br_taken_T = eq(io.arg_x, io.arg_y) @[BRANCH.scala 18:31]
        io.br_taken <= _io_br_taken_T @[BRANCH.scala 18:19]
        skip @[BRANCH.scala 17:28]
      else : @[BRANCH.scala 21:33]
        node _T_1 = eq(io.fnct3, UInt<1>("h01")) @[BRANCH.scala 21:24]
        when _T_1 : @[BRANCH.scala 21:33]
          node _io_br_taken_T_1 = neq(io.arg_x, io.arg_y) @[BRANCH.scala 22:31]
          io.br_taken <= _io_br_taken_T_1 @[BRANCH.scala 22:19]
          skip @[BRANCH.scala 21:33]
        else : @[BRANCH.scala 25:33]
          node _T_2 = eq(io.fnct3, UInt<3>("h04")) @[BRANCH.scala 25:24]
          when _T_2 : @[BRANCH.scala 25:33]
            node _io_br_taken_T_2 = lt(io.arg_x, io.arg_y) @[BRANCH.scala 26:31]
            io.br_taken <= _io_br_taken_T_2 @[BRANCH.scala 26:19]
            skip @[BRANCH.scala 25:33]
          else : @[BRANCH.scala 29:33]
            node _T_3 = eq(io.fnct3, UInt<3>("h05")) @[BRANCH.scala 29:24]
            when _T_3 : @[BRANCH.scala 29:33]
              node _io_br_taken_T_3 = geq(io.arg_x, io.arg_y) @[BRANCH.scala 30:31]
              io.br_taken <= _io_br_taken_T_3 @[BRANCH.scala 30:19]
              skip @[BRANCH.scala 29:33]
            else : @[BRANCH.scala 33:33]
              node _T_4 = eq(io.fnct3, UInt<3>("h06")) @[BRANCH.scala 33:24]
              when _T_4 : @[BRANCH.scala 33:33]
                node _io_br_taken_T_4 = asUInt(io.arg_x) @[BRANCH.scala 34:31]
                node _io_br_taken_T_5 = asUInt(io.arg_y) @[BRANCH.scala 34:49]
                node _io_br_taken_T_6 = lt(_io_br_taken_T_4, _io_br_taken_T_5) @[BRANCH.scala 34:38]
                io.br_taken <= _io_br_taken_T_6 @[BRANCH.scala 34:19]
                skip @[BRANCH.scala 33:33]
              else : @[BRANCH.scala 37:33]
                node _T_5 = eq(io.fnct3, UInt<3>("h07")) @[BRANCH.scala 37:24]
                when _T_5 : @[BRANCH.scala 37:33]
                  node _io_br_taken_T_7 = asUInt(io.arg_x) @[BRANCH.scala 38:31]
                  node _io_br_taken_T_8 = asUInt(io.arg_y) @[BRANCH.scala 38:50]
                  node _io_br_taken_T_9 = geq(_io_br_taken_T_7, _io_br_taken_T_8) @[BRANCH.scala 38:38]
                  io.br_taken <= _io_br_taken_T_9 @[BRANCH.scala 38:19]
                  skip @[BRANCH.scala 37:33]
      skip @[BRANCH.scala 15:19]
    
  module Jalr : 
    input clock : Clock
    input reset : Reset
    output io : {flip imme : UInt<32>, flip rdata1 : UInt<32>, out : UInt<32>}
    
    node _computedAddr_T = add(io.imme, io.rdata1) @[JALR.scala 12:30]
    node computedAddr = tail(_computedAddr_T, 1) @[JALR.scala 12:30]
    node _io_out_T = and(computedAddr, UInt<32>("h0fffffffe")) @[JALR.scala 15:26]
    io.out <= _io_out_T @[JALR.scala 15:10]
    
  module Forwarding : 
    input clock : Clock
    input reset : Reset
    output io : {flip IDEX_rs1 : UInt<5>, flip IDEX_rs2 : UInt<5>, flip EXMEM_rd : UInt<5>, flip EXMEM_regWr : UInt<1>, flip MEMWB_rd : UInt<5>, flip MEMWB_regWr : UInt<1>, forward_a : UInt<2>, forward_b : UInt<2>}
    
    io.forward_a <= UInt<1>("h00") @[Forwarding.scala 19:18]
    io.forward_b <= UInt<1>("h00") @[Forwarding.scala 20:18]
    node _T = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 23:25]
    node _T_1 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 23:51]
    node _T_2 = and(_T, _T_1) @[Forwarding.scala 23:36]
    node _T_3 = eq(io.EXMEM_rd, io.IDEX_rs1) @[Forwarding.scala 24:26]
    node _T_4 = and(_T_2, _T_3) @[Forwarding.scala 23:66]
    node _T_5 = eq(io.EXMEM_rd, io.IDEX_rs2) @[Forwarding.scala 24:66]
    node _T_6 = and(_T_4, _T_5) @[Forwarding.scala 24:50]
    when _T_6 : @[Forwarding.scala 24:84]
      io.forward_a <= UInt<2>("h02") @[Forwarding.scala 25:22]
      io.forward_b <= UInt<2>("h02") @[Forwarding.scala 26:22]
      skip @[Forwarding.scala 24:84]
    else : @[Forwarding.scala 29:44]
      node _T_7 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 28:31]
      node _T_8 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 28:57]
      node _T_9 = and(_T_7, _T_8) @[Forwarding.scala 28:42]
      node _T_10 = eq(io.EXMEM_rd, io.IDEX_rs2) @[Forwarding.scala 29:26]
      node _T_11 = and(_T_9, _T_10) @[Forwarding.scala 28:72]
      when _T_11 : @[Forwarding.scala 29:44]
        io.forward_b <= UInt<2>("h02") @[Forwarding.scala 30:22]
        skip @[Forwarding.scala 29:44]
      else : @[Forwarding.scala 33:44]
        node _T_12 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 32:31]
        node _T_13 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 32:57]
        node _T_14 = and(_T_12, _T_13) @[Forwarding.scala 32:42]
        node _T_15 = eq(io.EXMEM_rd, io.IDEX_rs1) @[Forwarding.scala 33:26]
        node _T_16 = and(_T_14, _T_15) @[Forwarding.scala 32:72]
        when _T_16 : @[Forwarding.scala 33:44]
          io.forward_a <= UInt<2>("h02") @[Forwarding.scala 34:22]
          skip @[Forwarding.scala 33:44]
    node _T_17 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[Forwarding.scala 38:26]
    node _T_18 = neq(io.MEMWB_rd, UInt<1>("h00")) @[Forwarding.scala 38:54]
    node _T_19 = and(_T_17, _T_18) @[Forwarding.scala 38:38]
    node _T_20 = eq(io.MEMWB_rd, io.IDEX_rs1) @[Forwarding.scala 38:86]
    node _T_21 = and(_T_19, _T_20) @[Forwarding.scala 38:70]
    node _T_22 = eq(io.MEMWB_rd, io.IDEX_rs2) @[Forwarding.scala 38:119]
    node _T_23 = and(_T_21, _T_22) @[Forwarding.scala 38:103]
    node _T_24 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 39:30]
    node _T_25 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 39:56]
    node _T_26 = and(_T_24, _T_25) @[Forwarding.scala 39:41]
    node _T_27 = eq(io.EXMEM_rd, io.IDEX_rs1) @[Forwarding.scala 39:87]
    node _T_28 = and(_T_26, _T_27) @[Forwarding.scala 39:71]
    node _T_29 = eq(io.EXMEM_rd, io.IDEX_rs2) @[Forwarding.scala 39:120]
    node _T_30 = and(_T_28, _T_29) @[Forwarding.scala 39:104]
    node _T_31 = not(_T_30) @[Forwarding.scala 39:13]
    node _T_32 = and(_T_23, _T_31) @[Forwarding.scala 38:136]
    when _T_32 : @[Forwarding.scala 39:139]
      io.forward_a <= UInt<1>("h01") @[Forwarding.scala 40:22]
      io.forward_b <= UInt<1>("h01") @[Forwarding.scala 41:22]
      skip @[Forwarding.scala 39:139]
    else : @[Forwarding.scala 44:105]
      node _T_33 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[Forwarding.scala 43:32]
      node _T_34 = neq(io.MEMWB_rd, UInt<1>("h00")) @[Forwarding.scala 43:60]
      node _T_35 = and(_T_33, _T_34) @[Forwarding.scala 43:44]
      node _T_36 = eq(io.MEMWB_rd, io.IDEX_rs2) @[Forwarding.scala 43:92]
      node _T_37 = and(_T_35, _T_36) @[Forwarding.scala 43:76]
      node _T_38 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 44:30]
      node _T_39 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 44:56]
      node _T_40 = and(_T_38, _T_39) @[Forwarding.scala 44:41]
      node _T_41 = eq(io.EXMEM_rd, io.IDEX_rs2) @[Forwarding.scala 44:87]
      node _T_42 = and(_T_40, _T_41) @[Forwarding.scala 44:71]
      node _T_43 = not(_T_42) @[Forwarding.scala 44:13]
      node _T_44 = and(_T_37, _T_43) @[Forwarding.scala 43:109]
      when _T_44 : @[Forwarding.scala 44:105]
        io.forward_b <= UInt<1>("h01") @[Forwarding.scala 45:22]
        skip @[Forwarding.scala 44:105]
      else : @[Forwarding.scala 48:105]
        node _T_45 = eq(io.MEMWB_regWr, UInt<1>("h01")) @[Forwarding.scala 47:32]
        node _T_46 = neq(io.MEMWB_rd, UInt<1>("h00")) @[Forwarding.scala 47:60]
        node _T_47 = and(_T_45, _T_46) @[Forwarding.scala 47:44]
        node _T_48 = eq(io.MEMWB_rd, io.IDEX_rs1) @[Forwarding.scala 47:92]
        node _T_49 = and(_T_47, _T_48) @[Forwarding.scala 47:76]
        node _T_50 = eq(io.EXMEM_regWr, UInt<1>("h01")) @[Forwarding.scala 48:30]
        node _T_51 = neq(io.EXMEM_rd, UInt<1>("h00")) @[Forwarding.scala 48:56]
        node _T_52 = and(_T_50, _T_51) @[Forwarding.scala 48:41]
        node _T_53 = eq(io.EXMEM_rd, io.IDEX_rs1) @[Forwarding.scala 48:87]
        node _T_54 = and(_T_52, _T_53) @[Forwarding.scala 48:71]
        node _T_55 = not(_T_54) @[Forwarding.scala 48:13]
        node _T_56 = and(_T_49, _T_55) @[Forwarding.scala 47:109]
        when _T_56 : @[Forwarding.scala 48:105]
          io.forward_a <= UInt<1>("h01") @[Forwarding.scala 49:22]
          skip @[Forwarding.scala 48:105]
    
  module HazardDetection : 
    input clock : Clock
    input reset : Reset
    output io : {flip IF_ID_inst : UInt<32>, flip ID_EX_memRead : UInt<1>, flip ID_EX_rd : UInt<5>, flip pc_in : SInt<32>, flip current_pc : SInt<32>, inst_forward : UInt<1>, pc_forward : UInt<1>, ctrl_forward : UInt<1>, inst_out : UInt<32>, pc_out : SInt<32>, current_pc_out : SInt<32>}
    
    node Rs1 = bits(io.IF_ID_inst, 19, 15) @[HazardDetection.scala 21:26]
    node Rs2 = bits(io.IF_ID_inst, 24, 20) @[HazardDetection.scala 22:26]
    node _T = eq(io.ID_EX_memRead, UInt<1>("h01")) @[HazardDetection.scala 24:25]
    node _T_1 = eq(io.ID_EX_rd, Rs1) @[HazardDetection.scala 24:50]
    node _T_2 = eq(io.ID_EX_rd, Rs2) @[HazardDetection.scala 24:75]
    node _T_3 = or(_T_1, _T_2) @[HazardDetection.scala 24:59]
    node _T_4 = and(_T, _T_3) @[HazardDetection.scala 24:33]
    when _T_4 : @[HazardDetection.scala 24:86]
      io.inst_forward <= UInt<1>("h01") @[HazardDetection.scala 25:21]
      io.pc_forward <= UInt<1>("h01") @[HazardDetection.scala 26:19]
      io.ctrl_forward <= UInt<1>("h01") @[HazardDetection.scala 27:21]
      skip @[HazardDetection.scala 24:86]
    else : @[HazardDetection.scala 28:15]
      io.inst_forward <= UInt<1>("h00") @[HazardDetection.scala 29:21]
      io.pc_forward <= UInt<1>("h00") @[HazardDetection.scala 30:19]
      io.ctrl_forward <= UInt<1>("h00") @[HazardDetection.scala 31:21]
      skip @[HazardDetection.scala 28:15]
    io.inst_out <= io.IF_ID_inst @[HazardDetection.scala 33:15]
    io.pc_out <= io.pc_in @[HazardDetection.scala 34:13]
    io.current_pc_out <= io.current_pc @[HazardDetection.scala 35:21]
    
  module BranchForward : 
    input clock : Clock
    input reset : Reset
    output io : {flip ID_EX_RD : UInt<5>, flip EX_MEM_RD : UInt<5>, flip MEM_WB_RD : UInt<5>, flip ID_EX_memRd : UInt<1>, flip EX_MEM_memRd : UInt<1>, flip MEM_WB_memRd : UInt<1>, flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip ctrl_branch : UInt<1>, forward_rs1 : UInt<4>, forward_rs2 : UInt<4>}
    
    io.forward_rs1 <= UInt<1>("h00") @[BranchForward.scala 21:18]
    io.forward_rs2 <= UInt<1>("h00") @[BranchForward.scala 22:18]
    node _T = eq(io.ctrl_branch, UInt<1>("h01")) @[BranchForward.scala 25:23]
    when _T : @[BranchForward.scala 25:32]
      node _T_1 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 27:22]
      node _T_2 = neq(io.ID_EX_memRd, UInt<1>("h01")) @[BranchForward.scala 27:48]
      node _T_3 = and(_T_1, _T_2) @[BranchForward.scala 27:30]
      when _T_3 : @[BranchForward.scala 27:57]
        node _T_4 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 28:24]
        node _T_5 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 28:50]
        node _T_6 = and(_T_4, _T_5) @[BranchForward.scala 28:35]
        when _T_6 : @[BranchForward.scala 28:62]
          io.forward_rs1 <= UInt<1>("h01") @[BranchForward.scala 29:24]
          io.forward_rs2 <= UInt<1>("h01") @[BranchForward.scala 30:24]
          skip @[BranchForward.scala 28:62]
        else : @[BranchForward.scala 31:42]
          node _T_7 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 31:30]
          when _T_7 : @[BranchForward.scala 31:42]
            io.forward_rs1 <= UInt<1>("h01") @[BranchForward.scala 32:24]
            skip @[BranchForward.scala 31:42]
          else : @[BranchForward.scala 33:42]
            node _T_8 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 33:30]
            when _T_8 : @[BranchForward.scala 33:42]
              io.forward_rs2 <= UInt<1>("h01") @[BranchForward.scala 34:24]
              skip @[BranchForward.scala 33:42]
        skip @[BranchForward.scala 27:57]
      node _T_9 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 39:23]
      node _T_10 = neq(io.EX_MEM_memRd, UInt<1>("h01")) @[BranchForward.scala 39:50]
      node _T_11 = and(_T_9, _T_10) @[BranchForward.scala 39:31]
      when _T_11 : @[BranchForward.scala 39:59]
        node _T_12 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 40:25]
        node _T_13 = eq(io.EX_MEM_RD, io.rs2) @[BranchForward.scala 40:52]
        node _T_14 = and(_T_12, _T_13) @[BranchForward.scala 40:36]
        node _T_15 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 40:80]
        node _T_16 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 40:103]
        node _T_17 = and(_T_15, _T_16) @[BranchForward.scala 40:88]
        node _T_18 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 40:129]
        node _T_19 = and(_T_17, _T_18) @[BranchForward.scala 40:114]
        node _T_20 = eq(_T_19, UInt<1>("h00")) @[BranchForward.scala 40:66]
        node _T_21 = and(_T_14, _T_20) @[BranchForward.scala 40:63]
        when _T_21 : @[BranchForward.scala 40:142]
          io.forward_rs1 <= UInt<2>("h02") @[BranchForward.scala 41:24]
          io.forward_rs2 <= UInt<2>("h02") @[BranchForward.scala 42:24]
          skip @[BranchForward.scala 40:142]
        else : @[BranchForward.scala 43:95]
          node _T_22 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 43:31]
          node _T_23 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 43:59]
          node _T_24 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 43:82]
          node _T_25 = and(_T_23, _T_24) @[BranchForward.scala 43:67]
          node _T_26 = eq(_T_25, UInt<1>("h00")) @[BranchForward.scala 43:45]
          node _T_27 = and(_T_22, _T_26) @[BranchForward.scala 43:42]
          when _T_27 : @[BranchForward.scala 43:95]
            io.forward_rs1 <= UInt<2>("h02") @[BranchForward.scala 44:24]
            skip @[BranchForward.scala 43:95]
          else : @[BranchForward.scala 45:95]
            node _T_28 = eq(io.EX_MEM_RD, io.rs2) @[BranchForward.scala 45:31]
            node _T_29 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 45:59]
            node _T_30 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 45:82]
            node _T_31 = and(_T_29, _T_30) @[BranchForward.scala 45:67]
            node _T_32 = eq(_T_31, UInt<1>("h00")) @[BranchForward.scala 45:45]
            node _T_33 = and(_T_28, _T_32) @[BranchForward.scala 45:42]
            when _T_33 : @[BranchForward.scala 45:95]
              io.forward_rs2 <= UInt<2>("h02") @[BranchForward.scala 46:24]
              skip @[BranchForward.scala 45:95]
        skip @[BranchForward.scala 39:59]
      node _T_34 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BranchForward.scala 51:23]
      node _T_35 = neq(io.MEM_WB_memRd, UInt<1>("h01")) @[BranchForward.scala 51:50]
      node _T_36 = and(_T_34, _T_35) @[BranchForward.scala 51:31]
      when _T_36 : @[BranchForward.scala 51:59]
        node _T_37 = eq(io.MEM_WB_RD, io.rs1) @[BranchForward.scala 52:25]
        node _T_38 = eq(io.MEM_WB_RD, io.rs2) @[BranchForward.scala 52:52]
        node _T_39 = and(_T_37, _T_38) @[BranchForward.scala 52:36]
        node _T_40 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 52:80]
        node _T_41 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 52:103]
        node _T_42 = and(_T_40, _T_41) @[BranchForward.scala 52:88]
        node _T_43 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 52:129]
        node _T_44 = and(_T_42, _T_43) @[BranchForward.scala 52:114]
        node _T_45 = eq(_T_44, UInt<1>("h00")) @[BranchForward.scala 52:66]
        node _T_46 = and(_T_39, _T_45) @[BranchForward.scala 52:63]
        node _T_47 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 52:159]
        node _T_48 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 52:183]
        node _T_49 = and(_T_47, _T_48) @[BranchForward.scala 52:167]
        node _T_50 = eq(io.EX_MEM_RD, io.rs2) @[BranchForward.scala 52:210]
        node _T_51 = and(_T_49, _T_50) @[BranchForward.scala 52:194]
        node _T_52 = eq(_T_51, UInt<1>("h00")) @[BranchForward.scala 52:144]
        node _T_53 = and(_T_46, _T_52) @[BranchForward.scala 52:141]
        when _T_53 : @[BranchForward.scala 52:223]
          io.forward_rs1 <= UInt<2>("h03") @[BranchForward.scala 53:24]
          io.forward_rs2 <= UInt<2>("h03") @[BranchForward.scala 54:24]
          skip @[BranchForward.scala 52:223]
        else : @[BranchForward.scala 55:149]
          node _T_54 = eq(io.MEM_WB_RD, io.rs1) @[BranchForward.scala 55:31]
          node _T_55 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 55:59]
          node _T_56 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 55:82]
          node _T_57 = and(_T_55, _T_56) @[BranchForward.scala 55:67]
          node _T_58 = eq(_T_57, UInt<1>("h00")) @[BranchForward.scala 55:45]
          node _T_59 = and(_T_54, _T_58) @[BranchForward.scala 55:42]
          node _T_60 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 55:112]
          node _T_61 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 55:136]
          node _T_62 = and(_T_60, _T_61) @[BranchForward.scala 55:120]
          node _T_63 = eq(_T_62, UInt<1>("h00")) @[BranchForward.scala 55:97]
          node _T_64 = and(_T_59, _T_63) @[BranchForward.scala 55:94]
          when _T_64 : @[BranchForward.scala 55:149]
            io.forward_rs1 <= UInt<2>("h03") @[BranchForward.scala 56:24]
            skip @[BranchForward.scala 55:149]
          else : @[BranchForward.scala 57:149]
            node _T_65 = eq(io.MEM_WB_RD, io.rs2) @[BranchForward.scala 57:31]
            node _T_66 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 57:59]
            node _T_67 = eq(io.ID_EX_RD, io.rs2) @[BranchForward.scala 57:82]
            node _T_68 = and(_T_66, _T_67) @[BranchForward.scala 57:67]
            node _T_69 = eq(_T_68, UInt<1>("h00")) @[BranchForward.scala 57:45]
            node _T_70 = and(_T_65, _T_69) @[BranchForward.scala 57:42]
            node _T_71 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 57:112]
            node _T_72 = eq(io.EX_MEM_RD, io.rs2) @[BranchForward.scala 57:136]
            node _T_73 = and(_T_71, _T_72) @[BranchForward.scala 57:120]
            node _T_74 = eq(_T_73, UInt<1>("h00")) @[BranchForward.scala 57:97]
            node _T_75 = and(_T_70, _T_74) @[BranchForward.scala 57:94]
            when _T_75 : @[BranchForward.scala 57:149]
              io.forward_rs2 <= UInt<2>("h03") @[BranchForward.scala 58:24]
              skip @[BranchForward.scala 57:149]
        skip @[BranchForward.scala 51:59]
      skip @[BranchForward.scala 25:32]
    else : @[BranchForward.scala 63:38]
      node _T_76 = eq(io.ctrl_branch, UInt<1>("h00")) @[BranchForward.scala 63:29]
      when _T_76 : @[BranchForward.scala 63:38]
        node _T_77 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 64:22]
        node _T_78 = neq(io.ID_EX_memRd, UInt<1>("h01")) @[BranchForward.scala 64:48]
        node _T_79 = and(_T_77, _T_78) @[BranchForward.scala 64:30]
        node _T_80 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 64:71]
        node _T_81 = and(_T_79, _T_80) @[BranchForward.scala 64:56]
        when _T_81 : @[BranchForward.scala 64:83]
          io.forward_rs1 <= UInt<3>("h06") @[BranchForward.scala 65:22]
          skip @[BranchForward.scala 64:83]
        else : @[BranchForward.scala 66:144]
          node _T_82 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 66:29]
          node _T_83 = neq(io.EX_MEM_memRd, UInt<1>("h01")) @[BranchForward.scala 66:56]
          node _T_84 = and(_T_82, _T_83) @[BranchForward.scala 66:37]
          node _T_85 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 66:80]
          node _T_86 = and(_T_84, _T_85) @[BranchForward.scala 66:64]
          node _T_87 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 66:108]
          node _T_88 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 66:131]
          node _T_89 = and(_T_87, _T_88) @[BranchForward.scala 66:116]
          node _T_90 = eq(_T_89, UInt<1>("h00")) @[BranchForward.scala 66:94]
          node _T_91 = and(_T_86, _T_90) @[BranchForward.scala 66:91]
          when _T_91 : @[BranchForward.scala 66:144]
            io.forward_rs1 <= UInt<3>("h07") @[BranchForward.scala 67:22]
            skip @[BranchForward.scala 66:144]
          else : @[BranchForward.scala 68:144]
            node _T_92 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 68:29]
            node _T_93 = eq(io.EX_MEM_memRd, UInt<1>("h01")) @[BranchForward.scala 68:56]
            node _T_94 = and(_T_92, _T_93) @[BranchForward.scala 68:37]
            node _T_95 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 68:80]
            node _T_96 = and(_T_94, _T_95) @[BranchForward.scala 68:64]
            node _T_97 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 68:108]
            node _T_98 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 68:131]
            node _T_99 = and(_T_97, _T_98) @[BranchForward.scala 68:116]
            node _T_100 = eq(_T_99, UInt<1>("h00")) @[BranchForward.scala 68:94]
            node _T_101 = and(_T_96, _T_100) @[BranchForward.scala 68:91]
            when _T_101 : @[BranchForward.scala 68:144]
              io.forward_rs1 <= UInt<4>("h09") @[BranchForward.scala 69:22]
              skip @[BranchForward.scala 68:144]
            else : @[BranchForward.scala 70:198]
              node _T_102 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BranchForward.scala 70:29]
              node _T_103 = neq(io.MEM_WB_memRd, UInt<1>("h01")) @[BranchForward.scala 70:56]
              node _T_104 = and(_T_102, _T_103) @[BranchForward.scala 70:37]
              node _T_105 = eq(io.MEM_WB_RD, io.rs1) @[BranchForward.scala 70:80]
              node _T_106 = and(_T_104, _T_105) @[BranchForward.scala 70:64]
              node _T_107 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 70:108]
              node _T_108 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 70:131]
              node _T_109 = and(_T_107, _T_108) @[BranchForward.scala 70:116]
              node _T_110 = eq(_T_109, UInt<1>("h00")) @[BranchForward.scala 70:94]
              node _T_111 = and(_T_106, _T_110) @[BranchForward.scala 70:91]
              node _T_112 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 70:161]
              node _T_113 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 70:185]
              node _T_114 = and(_T_112, _T_113) @[BranchForward.scala 70:169]
              node _T_115 = eq(_T_114, UInt<1>("h00")) @[BranchForward.scala 70:146]
              node _T_116 = and(_T_111, _T_115) @[BranchForward.scala 70:143]
              when _T_116 : @[BranchForward.scala 70:198]
                io.forward_rs1 <= UInt<4>("h08") @[BranchForward.scala 71:22]
                skip @[BranchForward.scala 70:198]
              else : @[BranchForward.scala 72:198]
                node _T_117 = neq(io.MEM_WB_RD, UInt<1>("h00")) @[BranchForward.scala 72:29]
                node _T_118 = eq(io.MEM_WB_memRd, UInt<1>("h01")) @[BranchForward.scala 72:56]
                node _T_119 = and(_T_117, _T_118) @[BranchForward.scala 72:37]
                node _T_120 = eq(io.MEM_WB_RD, io.rs1) @[BranchForward.scala 72:80]
                node _T_121 = and(_T_119, _T_120) @[BranchForward.scala 72:64]
                node _T_122 = neq(io.ID_EX_RD, UInt<1>("h00")) @[BranchForward.scala 72:108]
                node _T_123 = eq(io.ID_EX_RD, io.rs1) @[BranchForward.scala 72:131]
                node _T_124 = and(_T_122, _T_123) @[BranchForward.scala 72:116]
                node _T_125 = eq(_T_124, UInt<1>("h00")) @[BranchForward.scala 72:94]
                node _T_126 = and(_T_121, _T_125) @[BranchForward.scala 72:91]
                node _T_127 = neq(io.EX_MEM_RD, UInt<1>("h00")) @[BranchForward.scala 72:161]
                node _T_128 = eq(io.EX_MEM_RD, io.rs1) @[BranchForward.scala 72:185]
                node _T_129 = and(_T_127, _T_128) @[BranchForward.scala 72:169]
                node _T_130 = eq(_T_129, UInt<1>("h00")) @[BranchForward.scala 72:146]
                node _T_131 = and(_T_126, _T_130) @[BranchForward.scala 72:143]
                when _T_131 : @[BranchForward.scala 72:198]
                  io.forward_rs1 <= UInt<4>("h0a") @[BranchForward.scala 73:22]
                  skip @[BranchForward.scala 72:198]
        skip @[BranchForward.scala 63:38]
    
  module StructuralHazard : 
    input clock : Clock
    input reset : Reset
    output io : {flip rs1 : UInt<5>, flip rs2 : UInt<5>, flip MEM_WB_regWr : UInt<1>, flip MEM_WB_Rd : UInt<5>, fwd_rs1 : UInt<1>, fwd_rs2 : UInt<1>}
    
    node _T = eq(io.MEM_WB_Rd, io.rs1) @[StructuralHazard.scala 17:40]
    node _T_1 = and(io.MEM_WB_regWr, _T) @[StructuralHazard.scala 17:24]
    when _T_1 : @[StructuralHazard.scala 17:52]
      io.fwd_rs1 <= UInt<1>("h01") @[StructuralHazard.scala 18:16]
      skip @[StructuralHazard.scala 17:52]
    else : @[StructuralHazard.scala 19:15]
      io.fwd_rs1 <= UInt<1>("h00") @[StructuralHazard.scala 20:16]
      skip @[StructuralHazard.scala 19:15]
    node _T_2 = eq(io.MEM_WB_Rd, io.rs2) @[StructuralHazard.scala 24:40]
    node _T_3 = and(io.MEM_WB_regWr, _T_2) @[StructuralHazard.scala 24:24]
    when _T_3 : @[StructuralHazard.scala 24:52]
      io.fwd_rs2 <= UInt<1>("h01") @[StructuralHazard.scala 25:16]
      skip @[StructuralHazard.scala 24:52]
    else : @[StructuralHazard.scala 26:15]
      io.fwd_rs2 <= UInt<1>("h00") @[StructuralHazard.scala 27:16]
      skip @[StructuralHazard.scala 26:15]
    
  module PIPELINE : 
    input clock : Clock
    input reset : UInt<1>
    output io : {out : SInt<4>}
    
    inst IF_ID_ of IF_ID @[Main.scala 10:39]
    IF_ID_.clock <= clock
    IF_ID_.reset <= reset
    inst ID_EX_ of ID_EX @[Main.scala 11:39]
    ID_EX_.clock <= clock
    ID_EX_.reset <= reset
    inst EX_MEM_M of EX_MEM @[Main.scala 12:39]
    EX_MEM_M.clock <= clock
    EX_MEM_M.reset <= reset
    inst MEM_WB_M of MEM_WB @[Main.scala 13:39]
    MEM_WB_M.clock <= clock
    MEM_WB_M.reset <= reset
    inst PC of PC @[Main.scala 16:39]
    PC.clock <= clock
    PC.reset <= reset
    inst PC4 of PC4 @[Main.scala 17:39]
    PC4.clock <= clock
    PC4.reset <= reset
    inst InstMemory of InstMem @[Main.scala 21:39]
    InstMemory.clock <= clock
    InstMemory.reset <= reset
    inst DataMemory of DataMemory @[Main.scala 22:39]
    DataMemory.clock <= clock
    DataMemory.reset <= reset
    inst control_module of Control @[Main.scala 25:39]
    control_module.clock <= clock
    control_module.reset <= reset
    inst ImmGen of ImmGenerator @[Main.scala 26:39]
    ImmGen.clock <= clock
    ImmGen.reset <= reset
    inst RegFile of RegisterFile @[Main.scala 27:39]
    RegFile.clock <= clock
    RegFile.reset <= reset
    inst ALU_Control of AluControl @[Main.scala 28:39]
    ALU_Control.clock <= clock
    ALU_Control.reset <= reset
    inst ALU of ALU @[Main.scala 30:39]
    ALU.clock <= clock
    ALU.reset <= reset
    inst Branch_M of Branch @[Main.scala 32:39]
    Branch_M.clock <= clock
    Branch_M.reset <= reset
    inst JALR of Jalr @[Main.scala 33:39]
    JALR.clock <= clock
    JALR.reset <= reset
    inst Forwarding of Forwarding @[Main.scala 36:39]
    Forwarding.clock <= clock
    Forwarding.reset <= reset
    inst HazardDetect of HazardDetection @[Main.scala 37:39]
    HazardDetect.clock <= clock
    HazardDetect.reset <= reset
    inst Branch_Forward of BranchForward @[Main.scala 38:39]
    Branch_Forward.clock <= clock
    Branch_Forward.reset <= reset
    inst Structural of StructuralHazard @[Main.scala 39:39]
    Structural.clock <= clock
    Structural.reset <= reset
    node _PC_F_T = asSInt(PC4.io.out) @[Main.scala 42:29]
    node _PC_F_T_1 = eq(UInt<1>("h01"), HazardDetect.io.pc_forward) @[Mux.scala 80:60]
    node PC_F = mux(_PC_F_T_1, HazardDetect.io.pc_out, _PC_F_T) @[Mux.scala 80:57]
    PC.io.in <= PC_F @[Main.scala 45:14]
    node _PC4_io_pc_T = asUInt(PC.io.out) @[Main.scala 46:28]
    PC4.io.pc <= _PC4_io_pc_T @[Main.scala 46:15]
    node _InstMemory_io_addr_T = asUInt(PC.io.out) @[Main.scala 47:37]
    InstMemory.io.addr <= _InstMemory_io_addr_T @[Main.scala 47:24]
    node _PC_for_T = eq(UInt<1>("h01"), HazardDetect.io.inst_forward) @[Mux.scala 80:60]
    node PC_for = mux(_PC_for_T, HazardDetect.io.current_pc_out, PC.io.out) @[Mux.scala 80:57]
    node _Instruction_F_T = eq(UInt<1>("h01"), HazardDetect.io.inst_forward) @[Mux.scala 80:60]
    node Instruction_F = mux(_Instruction_F_T, HazardDetect.io.inst_out, InstMemory.io.data) @[Mux.scala 80:57]
    IF_ID_.io.pc_in <= PC.io.out @[Main.scala 57:29]
    IF_ID_.io.pc4_in <= PC4.io.out @[Main.scala 58:29]
    IF_ID_.io.SelectedPC <= PC_for @[Main.scala 59:29]
    IF_ID_.io.SelectedInstr <= Instruction_F @[Main.scala 60:29]
    ImmGen.io.instr <= IF_ID_.io.SelectedInstr_out @[Main.scala 63:29]
    node _ImmGen_io_pc_T = asUInt(IF_ID_.io.SelectedPC_out) @[Main.scala 64:57]
    ImmGen.io.pc <= _ImmGen_io_pc_T @[Main.scala 64:29]
    node _control_module_io_opcode_T = bits(IF_ID_.io.SelectedInstr_out, 6, 0) @[Main.scala 67:60]
    control_module.io.opcode <= _control_module_io_opcode_T @[Main.scala 67:30]
    node _RegFile_io_rs1_T = eq(control_module.io.opcode, UInt<6>("h033")) @[Main.scala 70:30]
    node _RegFile_io_rs1_T_1 = eq(control_module.io.opcode, UInt<5>("h013")) @[Main.scala 71:30]
    node _RegFile_io_rs1_T_2 = or(_RegFile_io_rs1_T, _RegFile_io_rs1_T_1) @[Main.scala 70:39]
    node _RegFile_io_rs1_T_3 = eq(control_module.io.opcode, UInt<6>("h023")) @[Main.scala 72:30]
    node _RegFile_io_rs1_T_4 = or(_RegFile_io_rs1_T_2, _RegFile_io_rs1_T_3) @[Main.scala 71:39]
    node _RegFile_io_rs1_T_5 = eq(control_module.io.opcode, UInt<2>("h03")) @[Main.scala 73:30]
    node _RegFile_io_rs1_T_6 = or(_RegFile_io_rs1_T_4, _RegFile_io_rs1_T_5) @[Main.scala 72:39]
    node _RegFile_io_rs1_T_7 = eq(control_module.io.opcode, UInt<7>("h063")) @[Main.scala 74:30]
    node _RegFile_io_rs1_T_8 = or(_RegFile_io_rs1_T_6, _RegFile_io_rs1_T_7) @[Main.scala 73:38]
    node _RegFile_io_rs1_T_9 = eq(control_module.io.opcode, UInt<7>("h067")) @[Main.scala 75:30]
    node _RegFile_io_rs1_T_10 = or(_RegFile_io_rs1_T_8, _RegFile_io_rs1_T_9) @[Main.scala 74:39]
    node _RegFile_io_rs1_T_11 = bits(IF_ID_.io.SelectedInstr_out, 19, 15) @[Main.scala 76:32]
    node _RegFile_io_rs1_T_12 = mux(_RegFile_io_rs1_T_10, _RegFile_io_rs1_T_11, UInt<1>("h00")) @[Main.scala 69:26]
    RegFile.io.rs1 <= _RegFile_io_rs1_T_12 @[Main.scala 69:20]
    node _RegFile_io_rs2_T = eq(control_module.io.opcode, UInt<6>("h033")) @[Main.scala 79:30]
    node _RegFile_io_rs2_T_1 = eq(control_module.io.opcode, UInt<6>("h023")) @[Main.scala 80:30]
    node _RegFile_io_rs2_T_2 = or(_RegFile_io_rs2_T, _RegFile_io_rs2_T_1) @[Main.scala 79:39]
    node _RegFile_io_rs2_T_3 = eq(control_module.io.opcode, UInt<7>("h063")) @[Main.scala 81:30]
    node _RegFile_io_rs2_T_4 = or(_RegFile_io_rs2_T_2, _RegFile_io_rs2_T_3) @[Main.scala 80:39]
    node _RegFile_io_rs2_T_5 = bits(IF_ID_.io.SelectedInstr_out, 24, 20) @[Main.scala 82:32]
    node _RegFile_io_rs2_T_6 = mux(_RegFile_io_rs2_T_4, _RegFile_io_rs2_T_5, UInt<1>("h00")) @[Main.scala 78:26]
    RegFile.io.rs2 <= _RegFile_io_rs2_T_6 @[Main.scala 78:20]
    RegFile.io.reg_write <= control_module.io.reg_write @[Main.scala 83:26]
    node _ImmValue_T = eq(UInt<1>("h00"), control_module.io.extend) @[Mux.scala 80:60]
    node _ImmValue_T_1 = mux(_ImmValue_T, ImmGen.io.I_type, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _ImmValue_T_2 = eq(UInt<1>("h01"), control_module.io.extend) @[Mux.scala 80:60]
    node _ImmValue_T_3 = mux(_ImmValue_T_2, ImmGen.io.S_type, _ImmValue_T_1) @[Mux.scala 80:57]
    node _ImmValue_T_4 = eq(UInt<2>("h02"), control_module.io.extend) @[Mux.scala 80:60]
    node ImmValue = mux(_ImmValue_T_4, ImmGen.io.U_type, _ImmValue_T_3) @[Mux.scala 80:57]
    node _Structural_io_rs1_T = bits(IF_ID_.io.SelectedInstr_out, 19, 15) @[Main.scala 90:67]
    Structural.io.rs1 <= _Structural_io_rs1_T @[Main.scala 90:37]
    node _Structural_io_rs2_T = bits(IF_ID_.io.SelectedInstr_out, 24, 20) @[Main.scala 91:67]
    Structural.io.rs2 <= _Structural_io_rs2_T @[Main.scala 91:37]
    Structural.io.MEM_WB_regWr <= MEM_WB_M.io.EXMEM_REG_W @[Main.scala 92:37]
    Structural.io.MEM_WB_Rd <= MEM_WB_M.io.MEMWB_rd_out @[Main.scala 93:37]
    wire S_rs1DataIn : SInt<32> @[Main.scala 95:27]
    wire S_rs2DataIn : SInt<32> @[Main.scala 96:27]
    node _T = eq(Structural.io.fwd_rs1, UInt<1>("h00")) @[Main.scala 99:33]
    when _T : @[Main.scala 99:42]
      S_rs1DataIn <= RegFile.io.rdata1 @[Main.scala 100:19]
      skip @[Main.scala 99:42]
    else : @[Main.scala 101:48]
      node _T_1 = eq(Structural.io.fwd_rs1, UInt<1>("h01")) @[Main.scala 101:39]
      when _T_1 : @[Main.scala 101:48]
        S_rs1DataIn <= RegFile.io.w_data @[Main.scala 102:19]
        skip @[Main.scala 101:48]
      else : @[Main.scala 103:17]
        S_rs1DataIn <= asSInt(UInt<1>("h00")) @[Main.scala 104:19]
        skip @[Main.scala 103:17]
    node _T_2 = eq(Structural.io.fwd_rs2, UInt<1>("h00")) @[Main.scala 107:33]
    when _T_2 : @[Main.scala 107:42]
      S_rs2DataIn <= RegFile.io.rdata2 @[Main.scala 108:19]
      skip @[Main.scala 107:42]
    else : @[Main.scala 109:48]
      node _T_3 = eq(Structural.io.fwd_rs2, UInt<1>("h01")) @[Main.scala 109:39]
      when _T_3 : @[Main.scala 109:48]
        S_rs2DataIn <= RegFile.io.w_data @[Main.scala 110:19]
        skip @[Main.scala 109:48]
      else : @[Main.scala 111:17]
        S_rs2DataIn <= asSInt(UInt<1>("h00")) @[Main.scala 112:19]
        skip @[Main.scala 111:17]
    ID_EX_.io.rs1_data_in <= S_rs1DataIn @[Main.scala 115:34]
    ID_EX_.io.rs2_data_in <= S_rs2DataIn @[Main.scala 116:34]
    node _T_4 = eq(HazardDetect.io.ctrl_forward, UInt<1>("h01")) @[Main.scala 119:39]
    when _T_4 : @[Main.scala 119:51]
      ID_EX_.io.ctrl_MemWr_in <= UInt<1>("h00") @[Main.scala 120:39]
      ID_EX_.io.ctrl_MemRd_in <= UInt<1>("h00") @[Main.scala 121:39]
      ID_EX_.io.ctrl_MemToReg_in <= UInt<1>("h00") @[Main.scala 122:39]
      ID_EX_.io.ctrl_Reg_W_in <= UInt<1>("h00") @[Main.scala 123:39]
      ID_EX_.io.ctrl_AluOp_in <= UInt<1>("h00") @[Main.scala 124:39]
      ID_EX_.io.ctrl_OpB_in <= UInt<1>("h00") @[Main.scala 125:39]
      ID_EX_.io.ctrl_Branch_in <= UInt<1>("h00") @[Main.scala 126:39]
      ID_EX_.io.ctrl_nextpc_in <= UInt<1>("h00") @[Main.scala 127:39]
      skip @[Main.scala 119:51]
    else : @[Main.scala 128:17]
      ID_EX_.io.ctrl_MemWr_in <= control_module.io.mem_write @[Main.scala 129:38]
      ID_EX_.io.ctrl_MemRd_in <= control_module.io.mem_read @[Main.scala 130:38]
      ID_EX_.io.ctrl_MemToReg_in <= control_module.io.men_to_reg @[Main.scala 131:38]
      ID_EX_.io.ctrl_Reg_W_in <= control_module.io.reg_write @[Main.scala 132:38]
      ID_EX_.io.ctrl_AluOp_in <= control_module.io.alu_operation @[Main.scala 133:38]
      ID_EX_.io.ctrl_OpB_in <= control_module.io.operand_B @[Main.scala 134:38]
      ID_EX_.io.ctrl_Branch_in <= control_module.io.branch @[Main.scala 135:38]
      ID_EX_.io.ctrl_nextpc_in <= control_module.io.next_pc_sel @[Main.scala 136:38]
      skip @[Main.scala 128:17]
    HazardDetect.io.IF_ID_inst <= IF_ID_.io.SelectedInstr_out @[Main.scala 139:37]
    HazardDetect.io.ID_EX_memRead <= ID_EX_.io.ctrl_MemRd_out @[Main.scala 140:37]
    HazardDetect.io.ID_EX_rd <= ID_EX_.io.rd_out @[Main.scala 141:37]
    node _HazardDetect_io_pc_in_T = asSInt(IF_ID_.io.pc4_out) @[Main.scala 142:58]
    HazardDetect.io.pc_in <= _HazardDetect_io_pc_in_T @[Main.scala 142:37]
    HazardDetect.io.current_pc <= IF_ID_.io.SelectedPC_out @[Main.scala 143:37]
    MEM_WB_M.io.EXMEM_MEMRD <= EX_MEM_M.io.EXMEM_memRd_out @[Main.scala 145:37]
    Branch_Forward.io.ID_EX_RD <= ID_EX_.io.rd_out @[Main.scala 148:37]
    Branch_Forward.io.EX_MEM_RD <= EX_MEM_M.io.EXMEM_rd_out @[Main.scala 149:37]
    Branch_Forward.io.MEM_WB_RD <= MEM_WB_M.io.MEMWB_rd_out @[Main.scala 150:37]
    Branch_Forward.io.ID_EX_memRd <= ID_EX_.io.ctrl_MemRd_out @[Main.scala 151:37]
    Branch_Forward.io.EX_MEM_memRd <= EX_MEM_M.io.EXMEM_memRd_out @[Main.scala 152:37]
    Branch_Forward.io.MEM_WB_memRd <= MEM_WB_M.io.MEMWB_memRd_out @[Main.scala 153:37]
    node _Branch_Forward_io_rs1_T = bits(IF_ID_.io.SelectedInstr_out, 19, 15) @[Main.scala 154:67]
    Branch_Forward.io.rs1 <= _Branch_Forward_io_rs1_T @[Main.scala 154:37]
    node _Branch_Forward_io_rs2_T = bits(IF_ID_.io.SelectedInstr_out, 24, 20) @[Main.scala 155:67]
    Branch_Forward.io.rs2 <= _Branch_Forward_io_rs2_T @[Main.scala 155:37]
    Branch_Forward.io.ctrl_branch <= control_module.io.branch @[Main.scala 156:37]
    node _Branch_M_io_arg_x_T = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_1 = mux(_Branch_M_io_arg_x_T, RegFile.io.rdata1, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_2 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_3 = mux(_Branch_M_io_arg_x_T_2, ALU.io.out, _Branch_M_io_arg_x_T_1) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_4 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_5 = mux(_Branch_M_io_arg_x_T_4, EX_MEM_M.io.EXMEM_alu_out, _Branch_M_io_arg_x_T_3) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_6 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_7 = mux(_Branch_M_io_arg_x_T_6, RegFile.io.w_data, _Branch_M_io_arg_x_T_5) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_8 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_9 = mux(_Branch_M_io_arg_x_T_8, DataMemory.io.dataOut, _Branch_M_io_arg_x_T_7) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_10 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_11 = mux(_Branch_M_io_arg_x_T_10, RegFile.io.w_data, _Branch_M_io_arg_x_T_9) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_12 = eq(UInt<3>("h06"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_13 = mux(_Branch_M_io_arg_x_T_12, RegFile.io.rdata1, _Branch_M_io_arg_x_T_11) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_14 = eq(UInt<3>("h07"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_15 = mux(_Branch_M_io_arg_x_T_14, RegFile.io.rdata1, _Branch_M_io_arg_x_T_13) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_16 = eq(UInt<4>("h08"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_17 = mux(_Branch_M_io_arg_x_T_16, RegFile.io.rdata1, _Branch_M_io_arg_x_T_15) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_18 = eq(UInt<4>("h09"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_19 = mux(_Branch_M_io_arg_x_T_18, RegFile.io.rdata1, _Branch_M_io_arg_x_T_17) @[Mux.scala 80:57]
    node _Branch_M_io_arg_x_T_20 = eq(UInt<4>("h0a"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _Branch_M_io_arg_x_T_21 = mux(_Branch_M_io_arg_x_T_20, RegFile.io.rdata1, _Branch_M_io_arg_x_T_19) @[Mux.scala 80:57]
    Branch_M.io.arg_x <= _Branch_M_io_arg_x_T_21 @[Main.scala 158:23]
    node _JALR_io_rdata1_T = asUInt(RegFile.io.rdata1) @[Main.scala 173:36]
    node _JALR_io_rdata1_T_1 = asUInt(RegFile.io.rdata1) @[Main.scala 174:36]
    node _JALR_io_rdata1_T_2 = asUInt(RegFile.io.rdata1) @[Main.scala 175:36]
    node _JALR_io_rdata1_T_3 = asUInt(RegFile.io.rdata1) @[Main.scala 176:36]
    node _JALR_io_rdata1_T_4 = asUInt(RegFile.io.rdata1) @[Main.scala 177:36]
    node _JALR_io_rdata1_T_5 = asUInt(RegFile.io.rdata1) @[Main.scala 178:36]
    node _JALR_io_rdata1_T_6 = asUInt(ALU.io.out) @[Main.scala 179:29]
    node _JALR_io_rdata1_T_7 = asUInt(EX_MEM_M.io.EXMEM_alu_out) @[Main.scala 180:44]
    node _JALR_io_rdata1_T_8 = asUInt(RegFile.io.w_data) @[Main.scala 181:36]
    node _JALR_io_rdata1_T_9 = asUInt(DataMemory.io.dataOut) @[Main.scala 182:40]
    node _JALR_io_rdata1_T_10 = asUInt(RegFile.io.w_data) @[Main.scala 183:37]
    node _JALR_io_rdata1_T_11 = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_12 = mux(_JALR_io_rdata1_T_11, _JALR_io_rdata1_T, UInt<1>("h00")) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_13 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_14 = mux(_JALR_io_rdata1_T_13, _JALR_io_rdata1_T_1, _JALR_io_rdata1_T_12) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_15 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_16 = mux(_JALR_io_rdata1_T_15, _JALR_io_rdata1_T_2, _JALR_io_rdata1_T_14) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_17 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_18 = mux(_JALR_io_rdata1_T_17, _JALR_io_rdata1_T_3, _JALR_io_rdata1_T_16) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_19 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_20 = mux(_JALR_io_rdata1_T_19, _JALR_io_rdata1_T_4, _JALR_io_rdata1_T_18) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_21 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_22 = mux(_JALR_io_rdata1_T_21, _JALR_io_rdata1_T_5, _JALR_io_rdata1_T_20) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_23 = eq(UInt<3>("h06"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_24 = mux(_JALR_io_rdata1_T_23, _JALR_io_rdata1_T_6, _JALR_io_rdata1_T_22) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_25 = eq(UInt<3>("h07"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_26 = mux(_JALR_io_rdata1_T_25, _JALR_io_rdata1_T_7, _JALR_io_rdata1_T_24) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_27 = eq(UInt<4>("h08"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_28 = mux(_JALR_io_rdata1_T_27, _JALR_io_rdata1_T_8, _JALR_io_rdata1_T_26) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_29 = eq(UInt<4>("h09"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_30 = mux(_JALR_io_rdata1_T_29, _JALR_io_rdata1_T_9, _JALR_io_rdata1_T_28) @[Mux.scala 80:57]
    node _JALR_io_rdata1_T_31 = eq(UInt<4>("h0a"), Branch_Forward.io.forward_rs1) @[Mux.scala 80:60]
    node _JALR_io_rdata1_T_32 = mux(_JALR_io_rdata1_T_31, _JALR_io_rdata1_T_10, _JALR_io_rdata1_T_30) @[Mux.scala 80:57]
    JALR.io.rdata1 <= _JALR_io_rdata1_T_32 @[Main.scala 172:20]
    node _JALR_io_imme_T = asUInt(ImmValue) @[Main.scala 185:30]
    JALR.io.imme <= _JALR_io_imme_T @[Main.scala 185:18]
    node _Branch_M_io_arg_y_T = eq(UInt<1>("h00"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_1 = mux(_Branch_M_io_arg_y_T, RegFile.io.rdata2, asSInt(UInt<1>("h00"))) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_2 = eq(UInt<1>("h01"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_3 = mux(_Branch_M_io_arg_y_T_2, ALU.io.out, _Branch_M_io_arg_y_T_1) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_4 = eq(UInt<2>("h02"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_5 = mux(_Branch_M_io_arg_y_T_4, EX_MEM_M.io.EXMEM_alu_out, _Branch_M_io_arg_y_T_3) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_6 = eq(UInt<2>("h03"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_7 = mux(_Branch_M_io_arg_y_T_6, RegFile.io.w_data, _Branch_M_io_arg_y_T_5) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_8 = eq(UInt<3>("h04"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_9 = mux(_Branch_M_io_arg_y_T_8, DataMemory.io.dataOut, _Branch_M_io_arg_y_T_7) @[Mux.scala 80:57]
    node _Branch_M_io_arg_y_T_10 = eq(UInt<3>("h05"), Branch_Forward.io.forward_rs2) @[Mux.scala 80:60]
    node _Branch_M_io_arg_y_T_11 = mux(_Branch_M_io_arg_y_T_10, RegFile.io.w_data, _Branch_M_io_arg_y_T_9) @[Mux.scala 80:57]
    Branch_M.io.arg_y <= _Branch_M_io_arg_y_T_11 @[Main.scala 187:23]
    node _Branch_M_io_fnct3_T = bits(IF_ID_.io.SelectedInstr_out, 14, 12) @[Main.scala 195:53]
    Branch_M.io.fnct3 <= _Branch_M_io_fnct3_T @[Main.scala 195:23]
    Branch_M.io.branch <= control_module.io.branch @[Main.scala 196:24]
    node _T_5 = eq(HazardDetect.io.pc_forward, UInt<1>("h01")) @[Main.scala 198:37]
    when _T_5 : @[Main.scala 198:46]
      PC.io.in <= HazardDetect.io.pc_out @[Main.scala 199:18]
      skip @[Main.scala 198:46]
    else : @[Main.scala 200:17]
      node _T_6 = eq(control_module.io.next_pc_sel, UInt<1>("h01")) @[Main.scala 201:44]
      when _T_6 : @[Main.scala 201:57]
        node _T_7 = eq(Branch_M.io.br_taken, UInt<1>("h01")) @[Main.scala 202:39]
        node _T_8 = eq(control_module.io.branch, UInt<1>("h01")) @[Main.scala 202:75]
        node _T_9 = and(_T_7, _T_8) @[Main.scala 202:47]
        when _T_9 : @[Main.scala 202:84]
          PC.io.in <= ImmGen.io.SB_type @[Main.scala 203:26]
          IF_ID_.io.pc_in <= asSInt(UInt<1>("h00")) @[Main.scala 204:33]
          IF_ID_.io.pc4_in <= UInt<1>("h00") @[Main.scala 205:34]
          IF_ID_.io.SelectedPC <= asSInt(UInt<1>("h00")) @[Main.scala 206:37]
          IF_ID_.io.SelectedInstr <= UInt<1>("h00") @[Main.scala 207:41]
          skip @[Main.scala 202:84]
        else : @[Main.scala 208:25]
          node _PC_io_in_T = asSInt(PC4.io.out) @[Main.scala 209:40]
          PC.io.in <= _PC_io_in_T @[Main.scala 209:26]
          skip @[Main.scala 208:25]
        skip @[Main.scala 201:57]
      else : @[Main.scala 211:63]
        node _T_10 = eq(control_module.io.next_pc_sel, UInt<2>("h02")) @[Main.scala 211:50]
        when _T_10 : @[Main.scala 211:63]
          PC.io.in <= ImmGen.io.UJ_type @[Main.scala 212:22]
          IF_ID_.io.pc_in <= asSInt(UInt<1>("h00")) @[Main.scala 213:29]
          IF_ID_.io.pc4_in <= UInt<1>("h00") @[Main.scala 214:30]
          IF_ID_.io.SelectedPC <= asSInt(UInt<1>("h00")) @[Main.scala 215:33]
          IF_ID_.io.SelectedInstr <= UInt<1>("h00") @[Main.scala 216:37]
          skip @[Main.scala 211:63]
        else : @[Main.scala 217:63]
          node _T_11 = eq(control_module.io.next_pc_sel, UInt<2>("h03")) @[Main.scala 217:50]
          when _T_11 : @[Main.scala 217:63]
            node _PC_io_in_T_1 = asSInt(JALR.io.out) @[Main.scala 218:37]
            PC.io.in <= _PC_io_in_T_1 @[Main.scala 218:22]
            IF_ID_.io.pc_in <= asSInt(UInt<1>("h00")) @[Main.scala 219:29]
            IF_ID_.io.pc4_in <= UInt<1>("h00") @[Main.scala 220:30]
            IF_ID_.io.SelectedPC <= asSInt(UInt<1>("h00")) @[Main.scala 221:33]
            IF_ID_.io.SelectedInstr <= UInt<1>("h00") @[Main.scala 222:37]
            skip @[Main.scala 217:63]
          else : @[Main.scala 223:21]
            node _PC_io_in_T_2 = asSInt(PC4.io.out) @[Main.scala 224:36]
            PC.io.in <= _PC_io_in_T_2 @[Main.scala 224:22]
            skip @[Main.scala 223:21]
      skip @[Main.scala 200:17]
    ID_EX_.io.rs1_in <= RegFile.io.rs1 @[Main.scala 228:33]
    ID_EX_.io.rs2_in <= RegFile.io.rs2 @[Main.scala 229:33]
    ID_EX_.io.imm <= ImmValue @[Main.scala 230:33]
    node _ID_EX__io_func3_in_T = bits(IF_ID_.io.SelectedInstr_out, 14, 12) @[Main.scala 231:63]
    ID_EX_.io.func3_in <= _ID_EX__io_func3_in_T @[Main.scala 231:33]
    node _ID_EX__io_func7_in_T = bits(IF_ID_.io.SelectedInstr_out, 30, 30) @[Main.scala 232:63]
    ID_EX_.io.func7_in <= _ID_EX__io_func7_in_T @[Main.scala 232:33]
    node _ID_EX__io_rd_in_T = bits(IF_ID_.io.SelectedInstr_out, 11, 7) @[Main.scala 233:63]
    ID_EX_.io.rd_in <= _ID_EX__io_rd_in_T @[Main.scala 233:33]
    ALU_Control.io.aluOp <= ID_EX_.io.ctrl_AluOp_out @[Main.scala 235:37]
    ALU.io.alu_Op <= ALU_Control.io.out @[Main.scala 236:37]
    ALU_Control.io.func3 <= ID_EX_.io.func3_out @[Main.scala 237:37]
    ALU_Control.io.func7 <= ID_EX_.io.func7_out @[Main.scala 238:37]
    EX_MEM_M.io.IDEX_rd <= ID_EX_.io.rd_out @[Main.scala 239:37]
    Forwarding.io.IDEX_rs1 <= ID_EX_.io.rs1_out @[Main.scala 242:35]
    Forwarding.io.IDEX_rs2 <= ID_EX_.io.rs2_out @[Main.scala 243:35]
    Forwarding.io.EXMEM_rd <= EX_MEM_M.io.EXMEM_rd_out @[Main.scala 244:35]
    Forwarding.io.EXMEM_regWr <= EX_MEM_M.io.EXMEM_reg_w_out @[Main.scala 245:35]
    Forwarding.io.MEMWB_rd <= MEM_WB_M.io.MEMWB_rd_out @[Main.scala 246:35]
    Forwarding.io.MEMWB_regWr <= MEM_WB_M.io.MEMWB_reg_w_out @[Main.scala 247:35]
    ID_EX_.io.ctrl_OpA_in <= control_module.io.operand_A @[Main.scala 249:27]
    ID_EX_.io.IFID_pc4_in <= IF_ID_.io.pc4_out @[Main.scala 250:27]
    wire d : SInt<32> @[Main.scala 252:17]
    node _T_12 = eq(ID_EX_.io.ctrl_OpA_out, UInt<1>("h01")) @[Main.scala 254:34]
    when _T_12 : @[Main.scala 254:47]
      node _ALU_io_in_A_T = asSInt(ID_EX_.io.IFID_pc4_out) @[Main.scala 255:47]
      ALU.io.in_A <= _ALU_io_in_A_T @[Main.scala 255:21]
      skip @[Main.scala 254:47]
    else : @[Main.scala 256:17]
      node _T_13 = eq(Forwarding.io.forward_a, UInt<1>("h00")) @[Main.scala 258:38]
      when _T_13 : @[Main.scala 258:51]
        ALU.io.in_A <= ID_EX_.io.rs1_data_out @[Main.scala 259:25]
        skip @[Main.scala 258:51]
      else : @[Main.scala 260:57]
        node _T_14 = eq(Forwarding.io.forward_a, UInt<1>("h01")) @[Main.scala 260:44]
        when _T_14 : @[Main.scala 260:57]
          ALU.io.in_A <= d @[Main.scala 261:25]
          skip @[Main.scala 260:57]
        else : @[Main.scala 262:57]
          node _T_15 = eq(Forwarding.io.forward_a, UInt<2>("h02")) @[Main.scala 262:44]
          when _T_15 : @[Main.scala 262:57]
            ALU.io.in_A <= EX_MEM_M.io.EXMEM_alu_out @[Main.scala 263:25]
            skip @[Main.scala 262:57]
          else : @[Main.scala 264:21]
            ALU.io.in_A <= ID_EX_.io.rs1_data_out @[Main.scala 265:25]
            skip @[Main.scala 264:21]
      skip @[Main.scala 256:17]
    wire RS2_value : SInt<32> @[Main.scala 269:25]
    node _T_16 = eq(Forwarding.io.forward_b, UInt<1>("h00")) @[Main.scala 270:35]
    when _T_16 : @[Main.scala 270:44]
      RS2_value <= ID_EX_.io.rs2_data_out @[Main.scala 271:17]
      skip @[Main.scala 270:44]
    else : @[Main.scala 272:50]
      node _T_17 = eq(Forwarding.io.forward_b, UInt<1>("h01")) @[Main.scala 272:41]
      when _T_17 : @[Main.scala 272:50]
        RS2_value <= d @[Main.scala 273:17]
        skip @[Main.scala 272:50]
      else : @[Main.scala 274:50]
        node _T_18 = eq(Forwarding.io.forward_b, UInt<2>("h02")) @[Main.scala 274:41]
        when _T_18 : @[Main.scala 274:50]
          RS2_value <= EX_MEM_M.io.EXMEM_alu_out @[Main.scala 275:17]
          skip @[Main.scala 274:50]
        else : @[Main.scala 276:17]
          RS2_value <= asSInt(UInt<1>("h00")) @[Main.scala 277:17]
          skip @[Main.scala 276:17]
    node _T_19 = eq(ID_EX_.io.ctrl_OpB_out, UInt<1>("h00")) @[Main.scala 279:34]
    when _T_19 : @[Main.scala 279:43]
      ALU.io.in_B <= RS2_value @[Main.scala 280:21]
      skip @[Main.scala 279:43]
    else : @[Main.scala 281:17]
      ALU.io.in_B <= ID_EX_.io.imm_out @[Main.scala 282:21]
      skip @[Main.scala 281:17]
    EX_MEM_M.io.IDEX_MEMRD <= ID_EX_.io.ctrl_MemRd_out @[Main.scala 287:37]
    EX_MEM_M.io.IDEX_MEMWR <= ID_EX_.io.ctrl_MemWr_out @[Main.scala 288:37]
    EX_MEM_M.io.IDEX_MEMTOREG <= ID_EX_.io.ctrl_MemToReg_out @[Main.scala 289:37]
    EX_MEM_M.io.IDEX_REG_W <= ID_EX_.io.ctrl_Reg_W_out @[Main.scala 290:37]
    EX_MEM_M.io.IDEX_rs2 <= RS2_value @[Main.scala 291:37]
    EX_MEM_M.io.alu_out <= ALU.io.out @[Main.scala 292:37]
    DataMemory.io.mem_read <= EX_MEM_M.io.EXMEM_memRd_out @[Main.scala 295:37]
    DataMemory.io.mem_write <= EX_MEM_M.io.EXMEM_memWr_out @[Main.scala 296:37]
    DataMemory.io.dataIn <= EX_MEM_M.io.EXMEM_rs2_out @[Main.scala 297:37]
    node _DataMemory_io_addr_T = asUInt(EX_MEM_M.io.EXMEM_alu_out) @[Main.scala 298:66]
    DataMemory.io.addr <= _DataMemory_io_addr_T @[Main.scala 298:37]
    MEM_WB_M.io.EXMEM_MEMTOREG <= EX_MEM_M.io.EXMEM_memToReg_out @[Main.scala 300:37]
    MEM_WB_M.io.EXMEM_REG_W <= EX_MEM_M.io.EXMEM_reg_w_out @[Main.scala 301:37]
    MEM_WB_M.io.EXMEM_rd <= EX_MEM_M.io.EXMEM_rd_out @[Main.scala 302:37]
    MEM_WB_M.io.in_dataMem_out <= DataMemory.io.dataOut @[Main.scala 303:37]
    MEM_WB_M.io.in_alu_out <= EX_MEM_M.io.EXMEM_alu_out @[Main.scala 304:37]
    RegFile.io.w_reg <= MEM_WB_M.io.MEMWB_rd_out @[Main.scala 307:37]
    RegFile.io.reg_write <= MEM_WB_M.io.MEMWB_reg_w_out @[Main.scala 308:37]
    node _T_20 = eq(MEM_WB_M.io.MEMWB_memToReg_out, UInt<1>("h00")) @[Main.scala 311:42]
    when _T_20 : @[Main.scala 311:51]
      d <= MEM_WB_M.io.MEMWB_alu_out @[Main.scala 312:9]
      skip @[Main.scala 311:51]
    else : @[Main.scala 313:57]
      node _T_21 = eq(MEM_WB_M.io.MEMWB_memToReg_out, UInt<1>("h01")) @[Main.scala 313:48]
      when _T_21 : @[Main.scala 313:57]
        d <= MEM_WB_M.io.MEMWB_dataMem_out @[Main.scala 314:9]
        skip @[Main.scala 313:57]
      else : @[Main.scala 315:17]
        d <= asSInt(UInt<1>("h00")) @[Main.scala 316:9]
        skip @[Main.scala 315:17]
    RegFile.io.w_data <= d @[Main.scala 318:23]
    io.out <= asSInt(UInt<1>("h00")) @[Main.scala 320:12]
    
